

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Nov 02 13:11:59 2019

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  000D                     	;# 
    53  000E                     	;# 
    54  000E                     	;# 
    55  000F                     	;# 
    56  0010                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0013                     	;# 
    60  0014                     	;# 
    61  0015                     	;# 
    62  0015                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001B                     	;# 
    70  001C                     	;# 
    71  001D                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0086                     	;# 
    77  0087                     	;# 
    78  0088                     	;# 
    79  0089                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0094                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93  010C                     	;# 
    94  010D                     	;# 
    95  010E                     	;# 
    96  010F                     	;# 
    97  018C                     	;# 
    98  018D                     	;# 
    99                           
   100                           	psect	strings
   101  0800                     __pstrings:	
   102  0800                     stringtab:	
   103  0800                     __stringtab:	
   104                           
   105                           ;	String table - string pointers are 1 byte each
   106  0800  1BFF               	btfsc	btemp+1,7
   107  0801  280A               	ljmp	stringcode
   108  0802  1383               	bcf	3,7
   109  0803  187F               	btfsc	btemp+1,0
   110  0804  1783               	bsf	3,7
   111  0805  0800               	movf	0,w
   112  0806  0A84               	incf	4,f
   113  0807  1903               	skipnz
   114  0808  0AFF               	incf	btemp+1,f
   115  0809  0008               	return
   116  080A                     stringcode:	
   117  080A                     stringdir:	
   118  080A  3008               	movlw	high stringdir
   119  080B  008A               	movwf	10
   120  080C  0804               	movf	4,w
   121  080D  0A84               	incf	4,f
   122  080E  0782               	addwf	2,f
   123  080F                     __stringbase:	
   124  080F  3400               	retlw	0
   125  0810                     __end_of__stringtab:	
   126  0810                     _dpowers:	
   127  0810  3401               	retlw	1
   128  0811  3400               	retlw	0
   129  0812  3400               	retlw	0
   130  0813  3400               	retlw	0
   131  0814  340A               	retlw	10
   132  0815  3400               	retlw	0
   133  0816  3400               	retlw	0
   134  0817  3400               	retlw	0
   135  0818  3464               	retlw	100
   136  0819  3400               	retlw	0
   137  081A  3400               	retlw	0
   138  081B  3400               	retlw	0
   139  081C  34E8               	retlw	232
   140  081D  3403               	retlw	3
   141  081E  3400               	retlw	0
   142  081F  3400               	retlw	0
   143  0820  3410               	retlw	16
   144  0821  3427               	retlw	39
   145  0822  3400               	retlw	0
   146  0823  3400               	retlw	0
   147  0824  34A0               	retlw	160
   148  0825  3486               	retlw	134
   149  0826  3401               	retlw	1
   150  0827  3400               	retlw	0
   151  0828  3440               	retlw	64
   152  0829  3442               	retlw	66
   153  082A  340F               	retlw	15
   154  082B  3400               	retlw	0
   155  082C  3480               	retlw	128
   156  082D  3496               	retlw	150
   157  082E  3498               	retlw	152
   158  082F  3400               	retlw	0
   159  0830  3400               	retlw	0
   160  0831  34E1               	retlw	225
   161  0832  34F5               	retlw	245
   162  0833  3405               	retlw	5
   163  0834  3400               	retlw	0
   164  0835  34CA               	retlw	202
   165  0836  349A               	retlw	154
   166  0837  343B               	retlw	59
   167  0838                     __end_of_dpowers:	
   168  001F                     _ADCON0bits	set	31
   169  001E                     _ADRESH	set	30
   170  000B                     _INTCONbits	set	11
   171  000C                     _PIR1bits	set	12
   172  0005                     _PORTA	set	5
   173  0006                     _PORTB	set	6
   174  0007                     _PORTC	set	7
   175  0008                     _PORTD	set	8
   176  0009                     _PORTE	set	9
   177  0009                     _PORTEbits	set	9
   178  009F                     _ADCON1bits	set	159
   179  009E                     _ADRESL	set	158
   180  008C                     _PIE1bits	set	140
   181  0085                     _TRISA	set	133
   182  0086                     _TRISB	set	134
   183  0087                     _TRISC	set	135
   184  0088                     _TRISD	set	136
   185  0089                     _TRISE	set	137
   186  0838                     __stringdata:	
   187  0838                     STR_1:	
   188  0838  3449               	retlw	73	;'I'
   189  0839  346E               	retlw	110	;'n'
   190  083A  3469               	retlw	105	;'i'
   191  083B  3463               	retlw	99	;'c'
   192  083C  3469               	retlw	105	;'i'
   193  083D  3461               	retlw	97	;'a'
   194  083E  346C               	retlw	108	;'l'
   195  083F  3469               	retlw	105	;'i'
   196  0840  347A               	retlw	122	;'z'
   197  0841  3461               	retlw	97	;'a'
   198  0842  346E               	retlw	110	;'n'
   199  0843  3464               	retlw	100	;'d'
   200  0844  346F               	retlw	111	;'o'
   201  0845  342E               	retlw	46	;'.'
   202  0846  342E               	retlw	46	;'.'
   203  0847  342E               	retlw	46	;'.'
   204  0848  3400               	retlw	0
   205  0849                     STR_2:	
   206  0849  3425               	retlw	37	;'%'
   207  084A  346C               	retlw	108	;'l'
   208  084B  3475               	retlw	117	;'u'
   209  084C  342E               	retlw	46	;'.'
   210  084D  3425               	retlw	37	;'%'
   211  084E  3436               	retlw	54	;'6'
   212  084F  342E               	retlw	46	;'.'
   213  0850  3436               	retlw	54	;'6'
   214  0851  346C               	retlw	108	;'l'
   215  0852  3475               	retlw	117	;'u'
   216  0853  3400               	retlw	0
   217  0854                     __end_of__stringdata:	
   218                           
   219                           ; #config settings
   220  0000                     
   221                           	psect	cinit
   222  0015                     start_initialization:	
   223  0015                     __initialization:	
   224                           
   225                           ; Clear objects allocated to BANK0
   226  0015  1383               	bcf	3,7	;select IRP bank0
   227  0016  305F               	movlw	low __pbssBANK0
   228  0017  0084               	movwf	4
   229  0018  3067               	movlw	low (__pbssBANK0+8)
   230  0019  120A  158A  262E  120A  118A  	fcall	clear_ram0
   231                           
   232                           ; Clear objects allocated to BANK1
   233  001E  30A0               	movlw	low __pbssBANK1
   234  001F  0084               	movwf	4
   235  0020  30B1               	movlw	low (__pbssBANK1+17)
   236  0021  120A  158A  262E   	fcall	clear_ram0
   237  0024                     end_of_initialization:	
   238                           ;End of C runtime variable initialization code
   239                           
   240  0024                     __end_of__initialization:	
   241  0024  0183               	clrf	3
   242  0025  120A  118A  2B6D   	ljmp	_main	;jump to C main() function
   243                           
   244                           	psect	bssBANK0
   245  005F                     __pbssBANK0:	
   246  005F                     _input:	
   247  005F                     	ds	3
   248  0062                     _ADCResult:	
   249  0062                     	ds	2
   250  0064                     _display:	
   251  0064                     	ds	1
   252  0065                     _status:	
   253  0065                     	ds	2
   254                           
   255                           	psect	bssBANK1
   256  00A0                     __pbssBANK1:	
   257  00A0                     ftoa@buf:	
   258  00A0                     	ds	17
   259                           
   260                           	psect	clrtext
   261  0E2E                     clear_ram0:	
   262                           ;	Called with FSR containing the base address, and
   263                           ;	W with the last address+1
   264                           
   265  0E2E  0064               	clrwdt	;clear the watchdog before getting into this loop
   266  0E2F                     clrloop0:	
   267  0E2F  0180               	clrf	0	;clear RAM location pointed to by FSR
   268  0E30  0A84               	incf	4,f	;increment pointer
   269  0E31  0604               	xorwf	4,w	;XOR with final address
   270  0E32  1903               	btfsc	3,2	;have we reached the end yet?
   271  0E33  3400               	retlw	0	;all done for this memory range, return
   272  0E34  0604               	xorwf	4,w	;XOR again to restore value
   273  0E35  2E2F               	goto	clrloop0	;do the next byte
   274                           
   275                           	psect	cstackCOMMON
   276  0070                     __pcstackCOMMON:	
   277  0070                     ?_isdigit:	
   278  0070                     ?_LCD_WriteCmd:	
   279                           ; 1 bit 
   280                           
   281  0070                     ?_LCD_WriteData:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ?_LCD_Clear:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ?_LCD_Init:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ?_ADC_Init:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_ISR:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ??_ISR:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_main:	
   300                           ; 0 bytes @ 0x0
   301                           
   302                           
   303                           ; 0 bytes @ 0x0
   304  0070                     	ds	4
   305  0074                     ??_isdigit:	
   306  0074                     ?_LCD_Cursor:	
   307                           ; 0 bytes @ 0x4
   308                           
   309  0074                     ??_LCD_WriteCmd:	
   310                           ; 0 bytes @ 0x4
   311                           
   312  0074                     ??_LCD_WriteData:	
   313                           ; 0 bytes @ 0x4
   314                           
   315  0074                     ??_ADC_Init:	
   316                           ; 0 bytes @ 0x4
   317                           
   318  0074                     ?_ADC_Read:	
   319                           ; 0 bytes @ 0x4
   320                           
   321  0074                     ?___ftge:	
   322                           ; 0 bytes @ 0x4
   323                           
   324  0074                     ??___lldiv:	
   325                           ; 1 bit 
   326                           
   327  0074                     ?_strlen:	
   328                           ; 0 bytes @ 0x4
   329                           
   330  0074                     ?___wmul:	
   331                           ; 2 bytes @ 0x4
   332                           
   333  0074                     ?___ftpack:	
   334                           ; 2 bytes @ 0x4
   335                           
   336  0074                     ?___ftneg:	
   337                           ; 3 bytes @ 0x4
   338                           
   339  0074                     LCD_Cursor@Col:	
   340                           ; 3 bytes @ 0x4
   341                           
   342  0074                     _isdigit$512:	
   343                           ; 1 bytes @ 0x4
   344                           
   345  0074                     ADC_Read@channel:	
   346                           ; 1 bytes @ 0x4
   347                           
   348  0074                     ___wmul@multiplier:	
   349                           ; 2 bytes @ 0x4
   350                           
   351  0074                     ___ftpack@arg:	
   352                           ; 2 bytes @ 0x4
   353                           
   354  0074                     ___ftge@ff1:	
   355                           ; 3 bytes @ 0x4
   356                           
   357  0074                     ___ftneg@f1:	
   358                           ; 3 bytes @ 0x4
   359                           
   360                           
   361                           ; 3 bytes @ 0x4
   362  0074                     	ds	1
   363  0075                     ??_LCD_Cursor:	
   364  0075                     LCD_WriteCmd@Byte:	
   365                           ; 0 bytes @ 0x5
   366                           
   367  0075                     LCD_WriteData@Byte:	
   368                           ; 1 bytes @ 0x5
   369                           
   370  0075                     isdigit@c:	
   371                           ; 1 bytes @ 0x5
   372                           
   373  0075                     ___lldiv@quotient:	
   374                           ; 1 bytes @ 0x5
   375                           
   376                           
   377                           ; 4 bytes @ 0x5
   378  0075                     	ds	1
   379  0076                     ??_strlen:	
   380  0076                     ?_LCD_WriteString:	
   381                           ; 0 bytes @ 0x6
   382                           
   383  0076                     ??_LCD_Clear:	
   384                           ; 0 bytes @ 0x6
   385                           
   386  0076                     ??_LCD_Init:	
   387                           ; 0 bytes @ 0x6
   388                           
   389  0076                     ??_ADC_Read:	
   390                           ; 0 bytes @ 0x6
   391                           
   392  0076                     LCD_Cursor@Row:	
   393                           ; 0 bytes @ 0x6
   394                           
   395  0076                     LCD_WriteString@Str:	
   396                           ; 1 bytes @ 0x6
   397                           
   398  0076                     ___wmul@multiplicand:	
   399                           ; 2 bytes @ 0x6
   400                           
   401                           
   402                           ; 2 bytes @ 0x6
   403  0076                     	ds	1
   404  0077                     ??___ftneg:	
   405  0077                     ___ftpack@exp:	
   406                           ; 0 bytes @ 0x7
   407                           
   408  0077                     ___ftge@ff2:	
   409                           ; 1 bytes @ 0x7
   410                           
   411                           
   412                           ; 3 bytes @ 0x7
   413  0077                     	ds	1
   414  0078                     ??_LCD_WriteString:	
   415  0078                     ??___wmul:	
   416                           ; 0 bytes @ 0x8
   417                           
   418  0078                     ___ftpack@sign:	
   419                           ; 0 bytes @ 0x8
   420                           
   421  0078                     ___wmul@product:	
   422                           ; 1 bytes @ 0x8
   423                           
   424                           
   425                           ; 2 bytes @ 0x8
   426  0078                     	ds	1
   427  0079                     ??___lltoft:	
   428  0079                     ??___lwtoft:	
   429                           ; 0 bytes @ 0x9
   430                           
   431  0079                     ___lldiv@counter:	
   432                           ; 0 bytes @ 0x9
   433                           
   434                           
   435                           ; 1 bytes @ 0x9
   436  0079                     	ds	1
   437  007A                     ??___ftsub:	
   438                           
   439                           	psect	cstackBANK0
   440  0020                     __pcstackBANK0:	
   441                           ; 0 bytes @ 0xA
   442                           
   443  0020                     ??___ftpack:	
   444  0020                     ??___ftge:	
   445                           ; 0 bytes @ 0x0
   446                           
   447  0020                     ?___lldiv:	
   448                           ; 0 bytes @ 0x0
   449                           
   450  0020                     strlen@s:	
   451                           ; 4 bytes @ 0x0
   452                           
   453  0020                     ___lldiv@divisor:	
   454                           ; 1 bytes @ 0x0
   455                           
   456                           
   457                           ; 4 bytes @ 0x0
   458  0020                     	ds	1
   459  0021                     strlen@cp:	
   460                           
   461                           ; 1 bytes @ 0x1
   462  0021                     	ds	2
   463  0023                     ?___ftadd:	
   464  0023                     ?___lltoft:	
   465                           ; 3 bytes @ 0x3
   466                           
   467  0023                     ?___lwtoft:	
   468                           ; 3 bytes @ 0x3
   469                           
   470  0023                     ___lwtoft@c:	
   471                           ; 3 bytes @ 0x3
   472                           
   473  0023                     ___ftadd@f1:	
   474                           ; 2 bytes @ 0x3
   475                           
   476  0023                     ___lltoft@c:	
   477                           ; 3 bytes @ 0x3
   478                           
   479                           
   480                           ; 4 bytes @ 0x3
   481  0023                     	ds	1
   482  0024                     ___lldiv@dividend:	
   483                           
   484                           ; 4 bytes @ 0x4
   485  0024                     	ds	2
   486  0026                     ?___ftmul:	
   487  0026                     ___ftadd@f2:	
   488                           ; 3 bytes @ 0x6
   489                           
   490  0026                     ___ftmul@f1:	
   491                           ; 3 bytes @ 0x6
   492                           
   493                           
   494                           ; 3 bytes @ 0x6
   495  0026                     	ds	1
   496  0027                     ___lltoft@exp:	
   497                           
   498                           ; 1 bytes @ 0x7
   499  0027                     	ds	1
   500  0028                     ?___llmod:	
   501  0028                     ___llmod@divisor:	
   502                           ; 4 bytes @ 0x8
   503                           
   504                           
   505                           ; 4 bytes @ 0x8
   506  0028                     	ds	1
   507  0029                     ??___ftadd:	
   508  0029                     ___ftmul@f2:	
   509                           ; 0 bytes @ 0x9
   510                           
   511                           
   512                           ; 3 bytes @ 0x9
   513  0029                     	ds	3
   514  002C                     ??___ftmul:	
   515  002C                     ___llmod@dividend:	
   516                           ; 0 bytes @ 0xC
   517                           
   518                           
   519                           ; 4 bytes @ 0xC
   520  002C                     	ds	1
   521  002D                     ___ftadd@sign:	
   522                           
   523                           ; 1 bytes @ 0xD
   524  002D                     	ds	1
   525  002E                     ___ftadd@exp2:	
   526                           
   527                           ; 1 bytes @ 0xE
   528  002E                     	ds	1
   529  002F                     ___ftadd@exp1:	
   530                           
   531                           ; 1 bytes @ 0xF
   532  002F                     	ds	1
   533  0030                     ??___llmod:	
   534  0030                     ?___ftsub:	
   535                           ; 0 bytes @ 0x10
   536                           
   537  0030                     ___ftmul@exp:	
   538                           ; 3 bytes @ 0x10
   539                           
   540  0030                     ___ftsub@f2:	
   541                           ; 1 bytes @ 0x10
   542                           
   543                           
   544                           ; 3 bytes @ 0x10
   545  0030                     	ds	1
   546  0031                     ___llmod@counter:	
   547  0031                     ___ftmul@f3_as_product:	
   548                           ; 1 bytes @ 0x11
   549                           
   550                           
   551                           ; 3 bytes @ 0x11
   552  0031                     	ds	1
   553  0032                     ?_sprintf:	
   554  0032                     sprintf@f:	
   555                           ; 2 bytes @ 0x12
   556                           
   557                           
   558                           ; 1 bytes @ 0x12
   559  0032                     	ds	1
   560  0033                     ___ftsub@f1:	
   561                           
   562                           ; 3 bytes @ 0x13
   563  0033                     	ds	1
   564  0034                     ___ftmul@cntr:	
   565                           
   566                           ; 1 bytes @ 0x14
   567  0034                     	ds	1
   568  0035                     ___ftmul@sign:	
   569                           
   570                           ; 1 bytes @ 0x15
   571  0035                     	ds	1
   572  0036                     ?___fttol:	
   573  0036                     ___fttol@f1:	
   574                           ; 4 bytes @ 0x16
   575                           
   576                           
   577                           ; 3 bytes @ 0x16
   578  0036                     	ds	4
   579  003A                     ??___fttol:	
   580                           
   581                           ; 0 bytes @ 0x1A
   582  003A                     	ds	1
   583  003B                     ??_sprintf:	
   584                           
   585                           ; 0 bytes @ 0x1B
   586  003B                     	ds	3
   587  003E                     ___fttol@sign1:	
   588                           
   589                           ; 1 bytes @ 0x1E
   590  003E                     	ds	1
   591  003F                     ___fttol@lval:	
   592                           
   593                           ; 4 bytes @ 0x1F
   594  003F                     	ds	1
   595  0040                     sprintf@flag:	
   596                           
   597                           ; 1 bytes @ 0x20
   598  0040                     	ds	1
   599  0041                     sprintf@ap:	
   600                           
   601                           ; 1 bytes @ 0x21
   602  0041                     	ds	1
   603  0042                     sprintf@_val:	
   604                           
   605                           ; 4 bytes @ 0x22
   606  0042                     	ds	1
   607  0043                     ___fttol@exp1:	
   608                           
   609                           ; 1 bytes @ 0x23
   610  0043                     	ds	3
   611  0046                     sprintf@sp:	
   612                           
   613                           ; 1 bytes @ 0x26
   614  0046                     	ds	1
   615  0047                     sprintf@width:	
   616                           
   617                           ; 2 bytes @ 0x27
   618  0047                     	ds	2
   619  0049                     sprintf@prec:	
   620                           
   621                           ; 2 bytes @ 0x29
   622  0049                     	ds	2
   623  004B                     sprintf@c:	
   624                           
   625                           ; 1 bytes @ 0x2B
   626  004B                     	ds	1
   627  004C                     ?_ftoa:	
   628  004C                     ftoa@f:	
   629                           ; 1 bytes @ 0x2C
   630                           
   631                           
   632                           ; 3 bytes @ 0x2C
   633  004C                     	ds	3
   634  004F                     ftoa@status:	
   635                           
   636                           ; 1 bytes @ 0x2F
   637  004F                     	ds	1
   638  0050                     ??_ftoa:	
   639                           
   640                           ; 0 bytes @ 0x30
   641  0050                     	ds	1
   642  0051                     ftoa@rem:	
   643                           
   644                           ; 4 bytes @ 0x31
   645  0051                     	ds	4
   646  0055                     ftoa@l:	
   647                           
   648                           ; 4 bytes @ 0x35
   649  0055                     	ds	4
   650  0059                     ftoa@cp:	
   651                           
   652                           ; 1 bytes @ 0x39
   653  0059                     	ds	1
   654  005A                     ??_main:	
   655                           
   656                           ; 0 bytes @ 0x3A
   657  005A                     	ds	3
   658  005D                     main@tam:	
   659                           
   660                           ; 2 bytes @ 0x3D
   661  005D                     	ds	2
   662                           
   663                           	psect	maintext
   664  036D                     __pmaintext:	
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 228 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  tam             2   61[BANK0 ] int 
   675 ;; Return value:  Size  Location     Type
   676 ;;		None               void
   677 ;; Registers used:
   678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 17F/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   684 ;;      Params:         0       0       0       0       0
   685 ;;      Locals:         0       2       0       0       0
   686 ;;      Temps:          0       3       0       0       0
   687 ;;      Totals:         0       5       0       0       0
   688 ;;Total ram usage:        5 bytes
   689 ;; Hardware stack levels required when called:    5
   690 ;; This function calls:
   691 ;;		_ADC_Init
   692 ;;		_ADC_Read
   693 ;;		_LCD_Clear
   694 ;;		_LCD_Cursor
   695 ;;		_LCD_Init
   696 ;;		_LCD_WriteString
   697 ;;		___ftmul
   698 ;;		___lwtoft
   699 ;;		_ftoa
   700 ;;		_strlen
   701 ;; This function is called by:
   702 ;;		Startup code after reset
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           
   707                           ;psect for function _main
   708  036D                     _main:	
   709                           
   710                           ;final.c: 230: TRISA = 0b00011111;
   711                           
   712                           ;incstack = 0
   713                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   714  036D  301F               	movlw	31
   715  036E  1683               	bsf	3,5	;RP0=1, select bank1
   716  036F  1303               	bcf	3,6	;RP1=0, select bank1
   717  0370  0085               	movwf	5	;volatile
   718                           
   719                           ;final.c: 231: PORTA = 0b00000000;
   720  0371  1283               	bcf	3,5	;RP0=0, select bank0
   721  0372  1303               	bcf	3,6	;RP1=0, select bank0
   722  0373  0185               	clrf	5	;volatile
   723                           
   724                           ;final.c: 232: TRISB = 0b00000000;
   725  0374  1683               	bsf	3,5	;RP0=1, select bank1
   726  0375  1303               	bcf	3,6	;RP1=0, select bank1
   727  0376  0186               	clrf	6	;volatile
   728                           
   729                           ;final.c: 233: PORTB = 0b00000000;
   730  0377  1283               	bcf	3,5	;RP0=0, select bank0
   731  0378  1303               	bcf	3,6	;RP1=0, select bank0
   732  0379  0186               	clrf	6	;volatile
   733                           
   734                           ;final.c: 234: TRISC = 0b00000000;
   735  037A  1683               	bsf	3,5	;RP0=1, select bank1
   736  037B  1303               	bcf	3,6	;RP1=0, select bank1
   737  037C  0187               	clrf	7	;volatile
   738                           
   739                           ;final.c: 235: PORTC = 0b00000000;
   740  037D  1283               	bcf	3,5	;RP0=0, select bank0
   741  037E  1303               	bcf	3,6	;RP1=0, select bank0
   742  037F  0187               	clrf	7	;volatile
   743                           
   744                           ;final.c: 236: TRISD = 0b00000000;
   745  0380  1683               	bsf	3,5	;RP0=1, select bank1
   746  0381  1303               	bcf	3,6	;RP1=0, select bank1
   747  0382  0188               	clrf	8	;volatile
   748                           
   749                           ;final.c: 237: PORTD = 0b00000000;
   750  0383  1283               	bcf	3,5	;RP0=0, select bank0
   751  0384  1303               	bcf	3,6	;RP1=0, select bank0
   752  0385  0188               	clrf	8	;volatile
   753                           
   754                           ;final.c: 238: TRISE = 0b00000000;
   755  0386  1683               	bsf	3,5	;RP0=1, select bank1
   756  0387  1303               	bcf	3,6	;RP1=0, select bank1
   757  0388  0189               	clrf	9	;volatile
   758                           
   759                           ;final.c: 239: PORTE = 0b00000000;
   760  0389  1283               	bcf	3,5	;RP0=0, select bank0
   761  038A  1303               	bcf	3,6	;RP1=0, select bank0
   762  038B  0189               	clrf	9	;volatile
   763                           
   764                           ;final.c: 241: ADC_Init();
   765  038C  120A  158A  266E  120A  118A  	fcall	_ADC_Init
   766                           
   767                           ;final.c: 243: LCD_Init();
   768  0391  120A  158A  27A9  120A  118A  	fcall	_LCD_Init
   769                           
   770                           ;final.c: 244: LCD_Cursor(0,0);
   771  0396  01F4               	clrf	LCD_Cursor@Col
   772  0397  3000               	movlw	0
   773  0398  120A  158A  2680  120A  118A  	fcall	_LCD_Cursor
   774                           
   775                           ;final.c: 246: _delay((unsigned long)((1000)*(18432000/4000.0)));
   776  039D  3018               	movlw	24
   777  039E  1283               	bcf	3,5	;RP0=0, select bank0
   778  039F  1303               	bcf	3,6	;RP1=0, select bank0
   779  03A0  00DC               	movwf	??_main+2
   780  03A1  3061               	movlw	97
   781  03A2  00DB               	movwf	??_main+1
   782  03A3  306E               	movlw	110
   783  03A4  00DA               	movwf	??_main
   784  03A5                     u2237:	
   785  03A5  0BDA               	decfsz	??_main,f
   786  03A6  2BA5               	goto	u2237
   787  03A7  0BDB               	decfsz	??_main+1,f
   788  03A8  2BA5               	goto	u2237
   789  03A9  0BDC               	decfsz	??_main+2,f
   790  03AA  2BA5               	goto	u2237
   791  03AB  0000               	nop
   792                           
   793                           ;final.c: 248: INTCONbits.PEIE = 1;
   794  03AC  170B               	bsf	11,6	;volatile
   795                           
   796                           ;final.c: 249: INTCONbits.GIE = 1;
   797  03AD  178B               	bsf	11,7	;volatile
   798                           
   799                           ;final.c: 251: LCD_Cursor(0,0);
   800  03AE  01F4               	clrf	LCD_Cursor@Col
   801  03AF  3000               	movlw	0
   802  03B0  120A  158A  2680  120A  118A  	fcall	_LCD_Cursor
   803                           
   804                           ;final.c: 252: LCD_WriteString("Inicializando...");
   805  03B5  3029               	movlw	low (STR_1-__stringbase)
   806  03B6  00F6               	movwf	LCD_WriteString@Str
   807  03B7  3080               	movlw	128
   808  03B8  00F7               	movwf	LCD_WriteString@Str+1
   809  03B9  120A  158A  26ED  120A  118A  	fcall	_LCD_WriteString
   810                           
   811                           ;final.c: 254: _delay((unsigned long)((1000)*(18432000/4000.0)));
   812  03BE  3018               	movlw	24
   813  03BF  1283               	bcf	3,5	;RP0=0, select bank0
   814  03C0  1303               	bcf	3,6	;RP1=0, select bank0
   815  03C1  00DC               	movwf	??_main+2
   816  03C2  3061               	movlw	97
   817  03C3  00DB               	movwf	??_main+1
   818  03C4  306E               	movlw	110
   819  03C5  00DA               	movwf	??_main
   820  03C6                     u2247:	
   821  03C6  0BDA               	decfsz	??_main,f
   822  03C7  2BC6               	goto	u2247
   823  03C8  0BDB               	decfsz	??_main+1,f
   824  03C9  2BC6               	goto	u2247
   825  03CA  0BDC               	decfsz	??_main+2,f
   826  03CB  2BC6               	goto	u2247
   827  03CC  0000               	nop
   828  03CD                     l1794:	
   829                           ;final.c: 256: while(1)
   830                           
   831                           
   832                           ;final.c: 257: {
   833                           ;final.c: 258: ADC_Read(1);
   834  03CD  3001               	movlw	1
   835  03CE  00F4               	movwf	ADC_Read@channel
   836  03CF  3000               	movlw	0
   837  03D0  00F5               	movwf	ADC_Read@channel+1
   838  03D1  120A  158A  2696  120A  118A  	fcall	_ADC_Read
   839                           
   840                           ;final.c: 260: ADCResult = ((ADRESH << 8) + ADRESL);
   841  03D6  1283               	bcf	3,5	;RP0=0, select bank0
   842  03D7  1303               	bcf	3,6	;RP1=0, select bank0
   843  03D8  081E               	movf	30,w	;volatile
   844  03D9  01E3               	clrf	_ADCResult+1
   845  03DA  07E3               	addwf	_ADCResult+1,f
   846  03DB  1683               	bsf	3,5	;RP0=1, select bank1
   847  03DC  1303               	bcf	3,6	;RP1=0, select bank1
   848  03DD  081E               	movf	30,w	;volatile
   849  03DE  1283               	bcf	3,5	;RP0=0, select bank0
   850  03DF  1303               	bcf	3,6	;RP1=0, select bank0
   851  03E0  01E2               	clrf	_ADCResult
   852  03E1  07E2               	addwf	_ADCResult,f
   853                           
   854                           ;final.c: 261: input = ADCResult * 0.097751710655;
   855  03E2  3032               	movlw	50
   856  03E3  00A6               	movwf	___ftmul@f1
   857  03E4  30C8               	movlw	200
   858  03E5  00A7               	movwf	___ftmul@f1+1
   859  03E6  303D               	movlw	61
   860  03E7  00A8               	movwf	___ftmul@f1+2
   861  03E8  0863               	movf	_ADCResult+1,w
   862  03E9  01A4               	clrf	___lwtoft@c+1
   863  03EA  07A4               	addwf	___lwtoft@c+1,f
   864  03EB  0862               	movf	_ADCResult,w
   865  03EC  01A3               	clrf	___lwtoft@c
   866  03ED  07A3               	addwf	___lwtoft@c,f
   867  03EE  120A  118A  27E5  120A  118A  	fcall	___lwtoft
   868  03F3  1283               	bcf	3,5	;RP0=0, select bank0
   869  03F4  1303               	bcf	3,6	;RP1=0, select bank0
   870  03F5  0823               	movf	?___lwtoft,w
   871  03F6  00A9               	movwf	___ftmul@f2
   872  03F7  0824               	movf	?___lwtoft+1,w
   873  03F8  00AA               	movwf	___ftmul@f2+1
   874  03F9  0825               	movf	?___lwtoft+2,w
   875  03FA  00AB               	movwf	___ftmul@f2+2
   876  03FB  120A  118A  246C  120A  118A  	fcall	___ftmul
   877  0400  1283               	bcf	3,5	;RP0=0, select bank0
   878  0401  1303               	bcf	3,6	;RP1=0, select bank0
   879  0402  0826               	movf	?___ftmul,w
   880  0403  00DF               	movwf	_input
   881  0404  0827               	movf	?___ftmul+1,w
   882  0405  00E0               	movwf	_input+1
   883  0406  0828               	movf	?___ftmul+2,w
   884  0407  00E1               	movwf	_input+2
   885                           
   886                           ;final.c: 280: display = ftoa(input, &status);
   887  0408  085F               	movf	_input,w
   888  0409  00CC               	movwf	ftoa@f
   889  040A  0860               	movf	_input+1,w
   890  040B  00CD               	movwf	ftoa@f+1
   891  040C  0861               	movf	_input+2,w
   892  040D  00CE               	movwf	ftoa@f+2
   893  040E  3065               	movlw	_status& (0+255)
   894  040F  00DA               	movwf	??_main
   895  0410  085A               	movf	??_main,w
   896  0411  00CF               	movwf	ftoa@status
   897  0412  120A  118A  253F  120A  118A  	fcall	_ftoa
   898  0417  1283               	bcf	3,5	;RP0=0, select bank0
   899  0418  1303               	bcf	3,6	;RP1=0, select bank0
   900  0419  00DB               	movwf	??_main+1
   901  041A  085B               	movf	??_main+1,w
   902  041B  00E4               	movwf	_display
   903                           
   904                           ;final.c: 282: LCD_Clear();
   905  041C  120A  158A  26CA  120A  118A  	fcall	_LCD_Clear
   906                           
   907                           ;final.c: 283: LCD_Cursor(0,0);
   908  0421  01F4               	clrf	LCD_Cursor@Col
   909  0422  3000               	movlw	0
   910  0423  120A  158A  2680  120A  118A  	fcall	_LCD_Cursor
   911                           
   912                           ;final.c: 285: LCD_Cursor(0,9);
   913  0428  3009               	movlw	9
   914  0429  1283               	bcf	3,5	;RP0=0, select bank0
   915  042A  1303               	bcf	3,6	;RP1=0, select bank0
   916  042B  00DA               	movwf	??_main
   917  042C  085A               	movf	??_main,w
   918  042D  00F4               	movwf	LCD_Cursor@Col
   919  042E  3000               	movlw	0
   920  042F  120A  158A  2680  120A  118A  	fcall	_LCD_Cursor
   921                           
   922                           ;final.c: 286: int tam = strlen(display);
   923  0434  1283               	bcf	3,5	;RP0=0, select bank0
   924  0435  1303               	bcf	3,6	;RP1=0, select bank0
   925  0436  0864               	movf	_display,w
   926  0437  120A  158A  2733  120A  118A  	fcall	_strlen
   927  043C  0875               	movf	?_strlen+1,w
   928  043D  1283               	bcf	3,5	;RP0=0, select bank0
   929  043E  1303               	bcf	3,6	;RP1=0, select bank0
   930  043F  01DE               	clrf	main@tam+1
   931  0440  07DE               	addwf	main@tam+1,f
   932  0441  0874               	movf	?_strlen,w
   933  0442  01DD               	clrf	main@tam
   934  0443  07DD               	addwf	main@tam,f
   935                           
   936                           ;final.c: 287: tam -=4;
   937  0444  30FC               	movlw	252
   938  0445  07DD               	addwf	main@tam,f
   939  0446  1803               	skipnc
   940  0447  0ADE               	incf	main@tam+1,f
   941  0448  30FF               	movlw	255
   942  0449  07DE               	addwf	main@tam+1,f
   943                           
   944                           ;final.c: 288: display[tam] = '%';
   945  044A  3025               	movlw	37
   946  044B  00DA               	movwf	??_main
   947  044C  085D               	movf	main@tam,w
   948  044D  0764               	addwf	_display,w
   949  044E  00DB               	movwf	??_main+1
   950  044F  085B               	movf	??_main+1,w
   951  0450  0084               	movwf	4
   952  0451  085A               	movf	??_main,w
   953  0452  1383               	bcf	3,7	;select IRP bank0
   954  0453  0080               	movwf	0
   955                           
   956                           ;final.c: 290: LCD_WriteString(display);
   957  0454  0864               	movf	_display,w
   958  0455  00F6               	movwf	LCD_WriteString@Str
   959  0456  3000               	movlw	0
   960  0457  00F7               	movwf	LCD_WriteString@Str+1
   961  0458  120A  158A  26ED  120A  118A  	fcall	_LCD_WriteString
   962                           
   963                           ;final.c: 292: _delay((unsigned long)((100)*(18432000/4000.0)));
   964  045D  3003               	movlw	3
   965  045E  1283               	bcf	3,5	;RP0=0, select bank0
   966  045F  1303               	bcf	3,6	;RP1=0, select bank0
   967  0460  00DC               	movwf	??_main+2
   968  0461  3057               	movlw	87
   969  0462  00DB               	movwf	??_main+1
   970  0463  306E               	movlw	110
   971  0464  00DA               	movwf	??_main
   972  0465                     u2257:	
   973  0465  0BDA               	decfsz	??_main,f
   974  0466  2C65               	goto	u2257
   975  0467  0BDB               	decfsz	??_main+1,f
   976  0468  2C65               	goto	u2257
   977  0469  0BDC               	decfsz	??_main+2,f
   978  046A  2C65               	goto	u2257
   979  046B  2BCD               	goto	l1794
   980  046C                     __end_of_main:	
   981                           
   982                           	psect	text1
   983  0F33                     __ptext1:	
   984 ;; *************** function _strlen *****************
   985 ;; Defined at:
   986 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strlen.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  s               1    wreg     PTR const unsigned char 
   989 ;;		 -> NULL(0), ftoa@buf(17), 
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  s               1    0[BANK0 ] PTR const unsigned char 
   992 ;;		 -> NULL(0), ftoa@buf(17), 
   993 ;;  cp              1    1[BANK0 ] PTR const unsigned char 
   994 ;;		 -> NULL(0), ftoa@buf(17), 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  2    4[COMMON] unsigned int 
   997 ;; Registers used:
   998 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1004 ;;      Params:         2       0       0       0       0
  1005 ;;      Locals:         0       2       0       0       0
  1006 ;;      Temps:          4       0       0       0       0
  1007 ;;      Totals:         6       2       0       0       0
  1008 ;;Total ram usage:        8 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           
  1019                           ;psect for function _strlen
  1020  0F33                     _strlen:	
  1021                           
  1022                           ;incstack = 0
  1023                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  1024                           ;strlen@s stored from wreg
  1025  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  1026  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  1027  0F35  00A0               	movwf	strlen@s
  1028  0F36  0820               	movf	strlen@s,w
  1029  0F37  00F6               	movwf	??_strlen
  1030  0F38  0876               	movf	??_strlen,w
  1031  0F39  00A1               	movwf	strlen@cp
  1032  0F3A                     l1746:	
  1033  0F3A  0821               	movf	strlen@cp,w
  1034  0F3B  0084               	movwf	4
  1035  0F3C  1383               	bcf	3,7	;select IRP bank0
  1036  0F3D  0880               	movf	0,f
  1037  0F3E  1903               	btfsc	3,2
  1038  0F3F  2F45               	goto	l1748
  1039  0F40  3001               	movlw	1
  1040  0F41  00F6               	movwf	??_strlen
  1041  0F42  0876               	movf	??_strlen,w
  1042  0F43  07A1               	addwf	strlen@cp,f
  1043  0F44  2F3A               	goto	l1746
  1044  0F45                     l1748:	
  1045  0F45  0820               	movf	strlen@s,w
  1046  0F46  00F6               	movwf	??_strlen
  1047  0F47  3000               	movlw	0
  1048  0F48  00F7               	movwf	??_strlen+1
  1049  0F49  09F6               	comf	??_strlen,f
  1050  0F4A  09F7               	comf	??_strlen+1,f
  1051  0F4B  0AF6               	incf	??_strlen,f
  1052  0F4C  1903               	skipnz
  1053  0F4D  0AF7               	incf	??_strlen+1,f
  1054  0F4E  0821               	movf	strlen@cp,w
  1055  0F4F  00F8               	movwf	??_strlen+2
  1056  0F50  3000               	movlw	0
  1057  0F51  00F9               	movwf	??_strlen+3
  1058  0F52  0876               	movf	??_strlen,w
  1059  0F53  0778               	addwf	??_strlen+2,w
  1060  0F54  00F4               	movwf	?_strlen
  1061  0F55  0877               	movf	??_strlen+1,w
  1062  0F56  1803               	skipnc
  1063  0F57  0A77               	incf	??_strlen+1,w
  1064  0F58  0779               	addwf	??_strlen+3,w
  1065  0F59  00F5               	movwf	?_strlen+1
  1066  0F5A  0008               	return
  1067  0F5B                     __end_of_strlen:	
  1068                           
  1069                           	psect	text2
  1070  053F                     __ptext2:	
  1071 ;; *************** function _ftoa *****************
  1072 ;; Defined at:
  1073 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftoa.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  f               3   44[BANK0 ] float 
  1076 ;;  status          1   47[BANK0 ] PTR int 
  1077 ;;		 -> status(2), 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  l               4   53[BANK0 ] unsigned long 
  1080 ;;  rem             4   49[BANK0 ] unsigned long 
  1081 ;;  cp              1   57[BANK0 ] PTR unsigned char 
  1082 ;;		 -> ftoa@buf(17), 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  1    wreg      PTR unsigned char 
  1085 ;; Registers used:
  1086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1092 ;;      Params:         0       4       0       0       0
  1093 ;;      Locals:         0       9       0       0       0
  1094 ;;      Temps:          0       1       0       0       0
  1095 ;;      Totals:         0      14       0       0       0
  1096 ;;Total ram usage:       14 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; Hardware stack levels required when called:    4
  1099 ;; This function calls:
  1100 ;;		___ftge
  1101 ;;		___ftmul
  1102 ;;		___ftneg
  1103 ;;		___ftsub
  1104 ;;		___fttol
  1105 ;;		___lltoft
  1106 ;;		_sprintf
  1107 ;; This function is called by:
  1108 ;;		_main
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           
  1113                           ;psect for function _ftoa
  1114  053F                     _ftoa:	
  1115                           
  1116                           ;incstack = 0
  1117                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1118  053F  30A0               	movlw	ftoa@buf& (0+255)
  1119  0540  1283               	bcf	3,5	;RP0=0, select bank0
  1120  0541  1303               	bcf	3,6	;RP1=0, select bank0
  1121  0542  00D0               	movwf	??_ftoa
  1122  0543  0850               	movf	??_ftoa,w
  1123  0544  00D9               	movwf	ftoa@cp
  1124  0545  084C               	movf	ftoa@f,w
  1125  0546  00F4               	movwf	___ftge@ff1
  1126  0547  084D               	movf	ftoa@f+1,w
  1127  0548  00F5               	movwf	___ftge@ff1+1
  1128  0549  084E               	movf	ftoa@f+2,w
  1129  054A  00F6               	movwf	___ftge@ff1+2
  1130  054B  3000               	movlw	0
  1131  054C  00F7               	movwf	___ftge@ff2
  1132  054D  3000               	movlw	0
  1133  054E  00F8               	movwf	___ftge@ff2+1
  1134  054F  3000               	movlw	0
  1135  0550  00F9               	movwf	___ftge@ff2+2
  1136  0551  120A  118A  26F5  120A  118A  	fcall	___ftge
  1137  0556  1803               	btfsc	3,0
  1138  0557  2D78               	goto	l1730
  1139  0558  302D               	movlw	45
  1140  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1141  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1142  055B  00D0               	movwf	??_ftoa
  1143  055C  0859               	movf	ftoa@cp,w
  1144  055D  0084               	movwf	4
  1145  055E  0850               	movf	??_ftoa,w
  1146  055F  1383               	bcf	3,7	;select IRP bank0
  1147  0560  0080               	movwf	0
  1148  0561  3001               	movlw	1
  1149  0562  00D0               	movwf	??_ftoa
  1150  0563  0850               	movf	??_ftoa,w
  1151  0564  07D9               	addwf	ftoa@cp,f
  1152  0565  084C               	movf	ftoa@f,w
  1153  0566  00F4               	movwf	___ftneg@f1
  1154  0567  084D               	movf	ftoa@f+1,w
  1155  0568  00F5               	movwf	___ftneg@f1+1
  1156  0569  084E               	movf	ftoa@f+2,w
  1157  056A  00F6               	movwf	___ftneg@f1+2
  1158  056B  120A  158A  2626  120A  118A  	fcall	___ftneg
  1159  0570  0874               	movf	?___ftneg,w
  1160  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1161  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1162  0573  00CC               	movwf	ftoa@f
  1163  0574  0875               	movf	?___ftneg+1,w
  1164  0575  00CD               	movwf	ftoa@f+1
  1165  0576  0876               	movf	?___ftneg+2,w
  1166  0577  00CE               	movwf	ftoa@f+2
  1167  0578                     l1730:	
  1168  0578  1283               	bcf	3,5	;RP0=0, select bank0
  1169  0579  1303               	bcf	3,6	;RP1=0, select bank0
  1170  057A  084C               	movf	ftoa@f,w
  1171  057B  00B6               	movwf	___fttol@f1
  1172  057C  084D               	movf	ftoa@f+1,w
  1173  057D  00B7               	movwf	___fttol@f1+1
  1174  057E  084E               	movf	ftoa@f+2,w
  1175  057F  00B8               	movwf	___fttol@f1+2
  1176  0580  120A  118A  25F9  120A  118A  	fcall	___fttol
  1177  0585  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0586  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0587  0839               	movf	?___fttol+3,w
  1180  0588  00D8               	movwf	ftoa@l+3
  1181  0589  0838               	movf	?___fttol+2,w
  1182  058A  00D7               	movwf	ftoa@l+2
  1183  058B  0837               	movf	?___fttol+1,w
  1184  058C  00D6               	movwf	ftoa@l+1
  1185  058D  0836               	movf	?___fttol,w
  1186  058E  00D5               	movwf	ftoa@l
  1187  058F  0858               	movf	ftoa@l+3,w
  1188  0590  00A6               	movwf	___lltoft@c+3
  1189  0591  0857               	movf	ftoa@l+2,w
  1190  0592  00A5               	movwf	___lltoft@c+2
  1191  0593  0856               	movf	ftoa@l+1,w
  1192  0594  00A4               	movwf	___lltoft@c+1
  1193  0595  0855               	movf	ftoa@l,w
  1194  0596  00A3               	movwf	___lltoft@c
  1195  0597  120A  118A  27B6  120A  118A  	fcall	___lltoft
  1196  059C  1283               	bcf	3,5	;RP0=0, select bank0
  1197  059D  1303               	bcf	3,6	;RP1=0, select bank0
  1198  059E  0823               	movf	?___lltoft,w
  1199  059F  00B0               	movwf	___ftsub@f2
  1200  05A0  0824               	movf	?___lltoft+1,w
  1201  05A1  00B1               	movwf	___ftsub@f2+1
  1202  05A2  0825               	movf	?___lltoft+2,w
  1203  05A3  00B2               	movwf	___ftsub@f2+2
  1204  05A4  084C               	movf	ftoa@f,w
  1205  05A5  00B3               	movwf	___ftsub@f1
  1206  05A6  084D               	movf	ftoa@f+1,w
  1207  05A7  00B4               	movwf	___ftsub@f1+1
  1208  05A8  084E               	movf	ftoa@f+2,w
  1209  05A9  00B5               	movwf	___ftsub@f1+2
  1210  05AA  120A  158A  26AE  120A  118A  	fcall	___ftsub
  1211  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1212  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1213  05B1  0830               	movf	?___ftsub,w
  1214  05B2  00CC               	movwf	ftoa@f
  1215  05B3  0831               	movf	?___ftsub+1,w
  1216  05B4  00CD               	movwf	ftoa@f+1
  1217  05B5  0832               	movf	?___ftsub+2,w
  1218  05B6  00CE               	movwf	ftoa@f+2
  1219  05B7  084C               	movf	ftoa@f,w
  1220  05B8  00A9               	movwf	___ftmul@f2
  1221  05B9  084D               	movf	ftoa@f+1,w
  1222  05BA  00AA               	movwf	___ftmul@f2+1
  1223  05BB  084E               	movf	ftoa@f+2,w
  1224  05BC  00AB               	movwf	___ftmul@f2+2
  1225  05BD  3024               	movlw	36
  1226  05BE  00A6               	movwf	___ftmul@f1
  1227  05BF  3074               	movlw	116
  1228  05C0  00A7               	movwf	___ftmul@f1+1
  1229  05C1  3049               	movlw	73
  1230  05C2  00A8               	movwf	___ftmul@f1+2
  1231  05C3  120A  118A  246C  120A  118A  	fcall	___ftmul
  1232  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  1233  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  1234  05CA  0826               	movf	?___ftmul,w
  1235  05CB  00B6               	movwf	___fttol@f1
  1236  05CC  0827               	movf	?___ftmul+1,w
  1237  05CD  00B7               	movwf	___fttol@f1+1
  1238  05CE  0828               	movf	?___ftmul+2,w
  1239  05CF  00B8               	movwf	___fttol@f1+2
  1240  05D0  120A  118A  25F9  120A  118A  	fcall	___fttol
  1241  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  1242  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  1243  05D7  0839               	movf	?___fttol+3,w
  1244  05D8  00D4               	movwf	ftoa@rem+3
  1245  05D9  0838               	movf	?___fttol+2,w
  1246  05DA  00D3               	movwf	ftoa@rem+2
  1247  05DB  0837               	movf	?___fttol+1,w
  1248  05DC  00D2               	movwf	ftoa@rem+1
  1249  05DD  0836               	movf	?___fttol,w
  1250  05DE  00D1               	movwf	ftoa@rem
  1251  05DF  303A               	movlw	(STR_2-__stringbase)& (0+255)
  1252  05E0  00D0               	movwf	??_ftoa
  1253  05E1  0850               	movf	??_ftoa,w
  1254  05E2  00B2               	movwf	sprintf@f
  1255  05E3  0858               	movf	ftoa@l+3,w
  1256  05E4  00B6               	movwf	?_sprintf+4
  1257  05E5  0857               	movf	ftoa@l+2,w
  1258  05E6  00B5               	movwf	?_sprintf+3
  1259  05E7  0856               	movf	ftoa@l+1,w
  1260  05E8  00B4               	movwf	?_sprintf+2
  1261  05E9  0855               	movf	ftoa@l,w
  1262  05EA  00B3               	movwf	?_sprintf+1
  1263  05EB  0854               	movf	ftoa@rem+3,w
  1264  05EC  00BA               	movwf	?_sprintf+8
  1265  05ED  0853               	movf	ftoa@rem+2,w
  1266  05EE  00B9               	movwf	?_sprintf+7
  1267  05EF  0852               	movf	ftoa@rem+1,w
  1268  05F0  00B8               	movwf	?_sprintf+6
  1269  05F1  0851               	movf	ftoa@rem,w
  1270  05F2  00B7               	movwf	?_sprintf+5
  1271  05F3  0859               	movf	ftoa@cp,w
  1272  05F4  120A  118A  2028   	fcall	_sprintf
  1273  05F7  30A0               	movlw	ftoa@buf& (0+255)
  1274  05F8  0008               	return
  1275  05F9                     __end_of_ftoa:	
  1276                           
  1277                           	psect	text3
  1278  0028                     __ptext3:	
  1279 ;; *************** function _sprintf *****************
  1280 ;; Defined at:
  1281 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  sp              1    wreg     PTR unsigned char 
  1284 ;;		 -> ftoa@buf(17), 
  1285 ;;  f               1   18[BANK0 ] PTR const unsigned char 
  1286 ;;		 -> STR_2(11), 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  sp              1   38[BANK0 ] PTR unsigned char 
  1289 ;;		 -> ftoa@buf(17), 
  1290 ;;  _val            4   34[BANK0 ] struct .
  1291 ;;  prec            2   41[BANK0 ] int 
  1292 ;;  width           2   39[BANK0 ] int 
  1293 ;;  c               1   43[BANK0 ] char 
  1294 ;;  ap              1   33[BANK0 ] PTR void [1]
  1295 ;;		 -> ?_sprintf(2), 
  1296 ;;  flag            1   32[BANK0 ] unsigned char 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  2   18[BANK0 ] int 
  1299 ;; Registers used:
  1300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1306 ;;      Params:         0       9       0       0       0
  1307 ;;      Locals:         0      12       0       0       0
  1308 ;;      Temps:          0       5       0       0       0
  1309 ;;      Totals:         0      26       0       0       0
  1310 ;;Total ram usage:       26 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    2
  1313 ;; This function calls:
  1314 ;;		___lldiv
  1315 ;;		___llmod
  1316 ;;		___wmul
  1317 ;;		_isdigit
  1318 ;; This function is called by:
  1319 ;;		_ftoa
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           
  1324                           ;psect for function _sprintf
  1325  0028                     _sprintf:	
  1326                           
  1327                           ;incstack = 0
  1328                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1329                           ;sprintf@sp stored from wreg
  1330  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1331  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1332  002A  00C6               	movwf	sprintf@sp
  1333                           
  1334                           ;doprnt.c: 494: va_list ap;
  1335                           ;doprnt.c: 499: signed char c;
  1336                           ;doprnt.c: 501: int width;
  1337                           ;doprnt.c: 504: int prec;
  1338                           ;doprnt.c: 508: unsigned char flag;
  1339                           ;doprnt.c: 527: union {
  1340                           ;doprnt.c: 528: unsigned long _val;
  1341                           ;doprnt.c: 529: struct {
  1342                           ;doprnt.c: 530: const char * _cp;
  1343                           ;doprnt.c: 531: unsigned _len;
  1344                           ;doprnt.c: 532: } _str;
  1345                           ;doprnt.c: 533: } _val;
  1346                           ;doprnt.c: 542: *ap = __va_start();
  1347  002B  3033               	movlw	(?_sprintf+1)& (0+255)
  1348  002C  00BB               	movwf	??_sprintf
  1349  002D  083B               	movf	??_sprintf,w
  1350  002E  00C1               	movwf	sprintf@ap
  1351  002F                     l1512:	
  1352                           ;doprnt.c: 545: while(c = *f++) {
  1353                           
  1354  002F  3001               	movlw	1
  1355  0030  07B2               	addwf	sprintf@f,f
  1356  0031  30FF               	movlw	-1
  1357  0032  0732               	addwf	sprintf@f,w
  1358  0033  0084               	movwf	4
  1359  0034  120A  158A  200A  120A  118A  	fcall	stringdir
  1360  0039  00BB               	movwf	??_sprintf
  1361  003A  083B               	movf	??_sprintf,w
  1362  003B  00CB               	movwf	sprintf@c
  1363  003C  08CB               	movf	sprintf@c,f
  1364  003D  1903               	btfsc	3,2
  1365  003E  2A5F               	goto	l1514
  1366                           
  1367                           ;doprnt.c: 547: if(c != '%')
  1368  003F  084B               	movf	sprintf@c,w
  1369  0040  3A25               	xorlw	37
  1370  0041  1903               	skipnz
  1371  0042  284F               	goto	l1422
  1372                           
  1373                           ;doprnt.c: 549: {
  1374                           ;doprnt.c: 550: ((*sp++ = (c)));
  1375  0043  084B               	movf	sprintf@c,w
  1376  0044  00BB               	movwf	??_sprintf
  1377  0045  0846               	movf	sprintf@sp,w
  1378  0046  0084               	movwf	4
  1379  0047  083B               	movf	??_sprintf,w
  1380  0048  1383               	bcf	3,7	;select IRP bank0
  1381  0049  0080               	movwf	0
  1382  004A  3001               	movlw	1
  1383  004B  00BB               	movwf	??_sprintf
  1384  004C  083B               	movf	??_sprintf,w
  1385  004D  07C6               	addwf	sprintf@sp,f
  1386                           
  1387                           ;doprnt.c: 551: continue;
  1388  004E  282F               	goto	l1512
  1389  004F                     l1422:	
  1390                           
  1391                           ;doprnt.c: 552: }
  1392                           ;doprnt.c: 555: width = 0;
  1393  004F  01C7               	clrf	sprintf@width
  1394  0050  01C8               	clrf	sprintf@width+1
  1395                           
  1396                           ;doprnt.c: 557: flag = 0;
  1397  0051  01C0               	clrf	sprintf@flag
  1398                           
  1399                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1400  0052  0832               	movf	sprintf@f,w
  1401  0053  0084               	movwf	4
  1402  0054  120A  158A  200A  120A  118A  	fcall	stringdir
  1403  0059  120A  158A  2642  120A  118A  	fcall	_isdigit
  1404  005E  1C03               	btfss	3,0
  1405  005F  28A2               	goto	l1436
  1406                           
  1407                           ;doprnt.c: 607: width = 0;
  1408  0060  1283               	bcf	3,5	;RP0=0, select bank0
  1409  0061  1303               	bcf	3,6	;RP1=0, select bank0
  1410  0062  01C7               	clrf	sprintf@width
  1411  0063  01C8               	clrf	sprintf@width+1
  1412  0064                     l1428:	
  1413                           ;doprnt.c: 608: do {
  1414                           
  1415                           
  1416                           ;doprnt.c: 609: width *= 10;
  1417  0064  300A               	movlw	10
  1418  0065  00F4               	movwf	___wmul@multiplier
  1419  0066  3000               	movlw	0
  1420  0067  00F5               	movwf	___wmul@multiplier+1
  1421  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1422  0069  1303               	bcf	3,6	;RP1=0, select bank0
  1423  006A  0848               	movf	sprintf@width+1,w
  1424  006B  01F7               	clrf	___wmul@multiplicand+1
  1425  006C  07F7               	addwf	___wmul@multiplicand+1,f
  1426  006D  0847               	movf	sprintf@width,w
  1427  006E  01F6               	clrf	___wmul@multiplicand
  1428  006F  07F6               	addwf	___wmul@multiplicand,f
  1429  0070  120A  158A  2710  120A  118A  	fcall	___wmul
  1430  0075  0875               	movf	?___wmul+1,w
  1431  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1432  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0078  01C8               	clrf	sprintf@width+1
  1434  0079  07C8               	addwf	sprintf@width+1,f
  1435  007A  0874               	movf	?___wmul,w
  1436  007B  01C7               	clrf	sprintf@width
  1437  007C  07C7               	addwf	sprintf@width,f
  1438                           
  1439                           ;doprnt.c: 610: width += *f++ - '0';
  1440  007D  0832               	movf	sprintf@f,w
  1441  007E  0084               	movwf	4
  1442  007F  120A  158A  200A  120A  118A  	fcall	stringdir
  1443  0084  3ED0               	addlw	208
  1444  0085  00BB               	movwf	??_sprintf
  1445  0086  30FF               	movlw	255
  1446  0087  1803               	skipnc
  1447  0088  3000               	movlw	0
  1448  0089  00BC               	movwf	??_sprintf+1
  1449  008A  083B               	movf	??_sprintf,w
  1450  008B  07C7               	addwf	sprintf@width,f
  1451  008C  1803               	skipnc
  1452  008D  0AC8               	incf	sprintf@width+1,f
  1453  008E  083C               	movf	??_sprintf+1,w
  1454  008F  07C8               	addwf	sprintf@width+1,f
  1455  0090  3001               	movlw	1
  1456  0091  00BB               	movwf	??_sprintf
  1457  0092  083B               	movf	??_sprintf,w
  1458  0093  07B2               	addwf	sprintf@f,f
  1459                           
  1460                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1461  0094  0832               	movf	sprintf@f,w
  1462  0095  0084               	movwf	4
  1463  0096  120A  158A  200A  120A  118A  	fcall	stringdir
  1464  009B  120A  158A  2642  120A  118A  	fcall	_isdigit
  1465  00A0  1803               	btfsc	3,0
  1466  00A1  2864               	goto	l1428
  1467  00A2                     l1436:	
  1468                           
  1469                           ;doprnt.c: 617: }
  1470                           ;doprnt.c: 620: if(*f == '.') {
  1471  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1472  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1473  00A4  0832               	movf	sprintf@f,w
  1474  00A5  0084               	movwf	4
  1475  00A6  120A  158A  200A  120A  118A  	fcall	stringdir
  1476  00AB  3A2E               	xorlw	46
  1477  00AC  1D03               	skipz
  1478  00AD  28F0               	goto	l1448
  1479                           
  1480                           ;doprnt.c: 622: f++;
  1481  00AE  3001               	movlw	1
  1482  00AF  00BB               	movwf	??_sprintf
  1483  00B0  083B               	movf	??_sprintf,w
  1484  00B1  07B2               	addwf	sprintf@f,f
  1485                           
  1486                           ;doprnt.c: 629: {
  1487                           ;doprnt.c: 630: prec = 0;
  1488  00B2  01C9               	clrf	sprintf@prec
  1489  00B3  01CA               	clrf	sprintf@prec+1
  1490  00B4                     l1446:	
  1491                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1492                           
  1493  00B4  0832               	movf	sprintf@f,w
  1494  00B5  0084               	movwf	4
  1495  00B6  120A  158A  200A  120A  118A  	fcall	stringdir
  1496  00BB  120A  158A  2642  120A  118A  	fcall	_isdigit
  1497  00C0  1C03               	btfss	3,0
  1498  00C1  28FC               	goto	l1454
  1499                           
  1500                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1501  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1502  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1503  00C4  084A               	movf	sprintf@prec+1,w
  1504  00C5  01F5               	clrf	___wmul@multiplier+1
  1505  00C6  07F5               	addwf	___wmul@multiplier+1,f
  1506  00C7  0849               	movf	sprintf@prec,w
  1507  00C8  01F4               	clrf	___wmul@multiplier
  1508  00C9  07F4               	addwf	___wmul@multiplier,f
  1509  00CA  300A               	movlw	10
  1510  00CB  00F6               	movwf	___wmul@multiplicand
  1511  00CC  3000               	movlw	0
  1512  00CD  00F7               	movwf	___wmul@multiplicand+1
  1513  00CE  120A  158A  2710  120A  118A  	fcall	___wmul
  1514  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1515  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1516  00D5  0832               	movf	sprintf@f,w
  1517  00D6  0084               	movwf	4
  1518  00D7  120A  158A  200A  120A  118A  	fcall	stringdir
  1519  00DC  0774               	addwf	?___wmul,w
  1520  00DD  00BB               	movwf	??_sprintf
  1521  00DE  3000               	movlw	0
  1522  00DF  1803               	skipnc
  1523  00E0  3001               	movlw	1
  1524  00E1  0775               	addwf	?___wmul+1,w
  1525  00E2  00BC               	movwf	??_sprintf+1
  1526  00E3  083B               	movf	??_sprintf,w
  1527  00E4  3ED0               	addlw	208
  1528  00E5  00C9               	movwf	sprintf@prec
  1529  00E6  083C               	movf	??_sprintf+1,w
  1530  00E7  1803               	skipnc
  1531  00E8  3E01               	addlw	1
  1532  00E9  3EFF               	addlw	255
  1533  00EA  00CA               	movwf	sprintf@prec+1
  1534  00EB  3001               	movlw	1
  1535  00EC  00BB               	movwf	??_sprintf
  1536  00ED  083B               	movf	??_sprintf,w
  1537  00EE  07B2               	addwf	sprintf@f,f
  1538  00EF  28B4               	goto	l1446
  1539  00F0                     l1448:	
  1540                           ;doprnt.c: 633: }
  1541                           ;doprnt.c: 634: } else {
  1542                           
  1543                           
  1544                           ;doprnt.c: 635: prec = 0;
  1545  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1546  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1547  00F2  01C9               	clrf	sprintf@prec
  1548  00F3  01CA               	clrf	sprintf@prec+1
  1549                           
  1550                           ;doprnt.c: 644: switch(c = *f++) {
  1551                           
  1552                           ;doprnt.c: 639: }
  1553                           ;doprnt.c: 642: loop:
  1554  00F4  28FC               	goto	l1454
  1555  00F5                     l118:	
  1556                           ;doprnt.c: 650: case 'l':
  1557                           
  1558                           ;doprnt.c: 647: goto alldone;
  1559                           
  1560                           ;doprnt.c: 646: case 0:
  1561                           
  1562                           
  1563                           ;doprnt.c: 652: flag |= 0x10;
  1564  00F5  1640               	bsf	sprintf@flag,4
  1565                           
  1566                           ;doprnt.c: 653: goto loop;
  1567  00F6  28FC               	goto	l1454
  1568  00F7                     l1450:	
  1569                           ;doprnt.c: 826: case 'u':
  1570                           
  1571                           ;doprnt.c: 822: continue;
  1572                           
  1573                           ;doprnt.c: 811: default:
  1574                           
  1575                           
  1576                           ;doprnt.c: 827: flag |= 0xC0;
  1577  00F7  30C0               	movlw	192
  1578  00F8  00BB               	movwf	??_sprintf
  1579  00F9  083B               	movf	??_sprintf,w
  1580  00FA  04C0               	iorwf	sprintf@flag,f
  1581                           
  1582                           ;doprnt.c: 831: }
  1583                           
  1584                           ;doprnt.c: 828: break;
  1585  00FB  2913               	goto	l121
  1586  00FC                     l1454:	
  1587  00FC  3001               	movlw	1
  1588  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1589  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1590  00FF  07B2               	addwf	sprintf@f,f
  1591  0100  30FF               	movlw	-1
  1592  0101  0732               	addwf	sprintf@f,w
  1593  0102  0084               	movwf	4
  1594  0103  120A  158A  200A  120A  118A  	fcall	stringdir
  1595  0108  00CB               	movwf	sprintf@c
  1596                           
  1597                           ; Switch size 1, requested type "space"
  1598                           ; Number of cases is 3, Range of values is 0 to 117
  1599                           ; switch strategies available:
  1600                           ; Name         Instructions Cycles
  1601                           ; simple_byte           10     6 (average)
  1602                           ; jumptable            260     6 (fixed)
  1603                           ;	Chosen strategy is simple_byte
  1604  0109  3A00               	xorlw	0	; case 0
  1605  010A  1903               	skipnz
  1606  010B  2A5F               	goto	l1514
  1607  010C  3A6C               	xorlw	108	; case 108
  1608  010D  1903               	skipnz
  1609  010E  28F5               	goto	l118
  1610  010F  3A19               	xorlw	25	; case 117
  1611  0110  1903               	skipnz
  1612  0111  28F7               	goto	l1450
  1613  0112  282F               	goto	l1512
  1614  0113                     l121:	
  1615                           
  1616                           ;doprnt.c: 1282: {
  1617                           ;doprnt.c: 1290: if(flag & 0x10)
  1618  0113  1E40               	btfss	sprintf@flag,4
  1619  0114  2925               	goto	l1460
  1620                           
  1621                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  1622  0115  0841               	movf	sprintf@ap,w
  1623  0116  0084               	movwf	4
  1624  0117  1383               	bcf	3,7	;select IRP bank0
  1625  0118  0800               	movf	0,w
  1626  0119  00C2               	movwf	sprintf@_val
  1627  011A  0A84               	incf	4,f
  1628  011B  0800               	movf	0,w
  1629  011C  00C3               	movwf	sprintf@_val+1
  1630  011D  0A84               	incf	4,f
  1631  011E  0800               	movf	0,w
  1632  011F  00C4               	movwf	sprintf@_val+2
  1633  0120  0A84               	incf	4,f
  1634  0121  0800               	movf	0,w
  1635  0122  00C5               	movwf	sprintf@_val+3
  1636  0123  3004               	movlw	4
  1637  0124  2934               	goto	L1
  1638  0125                     l1460:	
  1639                           
  1640                           ;doprnt.c: 1292: else
  1641                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1642  0125  0841               	movf	sprintf@ap,w
  1643  0126  0084               	movwf	4
  1644  0127  1383               	bcf	3,7	;select IRP bank0
  1645  0128  0800               	movf	0,w
  1646  0129  00BB               	movwf	??_sprintf
  1647  012A  0A84               	incf	4,f
  1648  012B  0800               	movf	0,w
  1649  012C  00BC               	movwf	??_sprintf+1
  1650  012D  083B               	movf	??_sprintf,w
  1651  012E  00C2               	movwf	sprintf@_val
  1652  012F  083C               	movf	??_sprintf+1,w
  1653  0130  00C3               	movwf	sprintf@_val+1
  1654  0131  01C4               	clrf	sprintf@_val+2
  1655  0132  01C5               	clrf	sprintf@_val+3
  1656  0133  3002               	movlw	2
  1657  0134                     L1:	
  1658  0134  00BB               	movwf	??_sprintf
  1659  0135  083B               	movf	??_sprintf,w
  1660  0136  07C1               	addwf	sprintf@ap,f
  1661                           
  1662                           ;doprnt.c: 1296: }
  1663                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  1664  0137  084A               	movf	sprintf@prec+1,w
  1665  0138  0449               	iorwf	sprintf@prec,w
  1666  0139  1D03               	skipz
  1667  013A  2947               	goto	l1470
  1668  013B  0845               	movf	sprintf@_val+3,w
  1669  013C  0444               	iorwf	sprintf@_val+2,w
  1670  013D  0443               	iorwf	sprintf@_val+1,w
  1671  013E  0442               	iorwf	sprintf@_val,w
  1672  013F  1D03               	skipz
  1673  0140  2947               	goto	l1470
  1674                           
  1675                           ;doprnt.c: 1300: prec++;
  1676  0141  3001               	movlw	1
  1677  0142  07C9               	addwf	sprintf@prec,f
  1678  0143  1803               	skipnc
  1679  0144  0ACA               	incf	sprintf@prec+1,f
  1680  0145  3000               	movlw	0
  1681  0146  07CA               	addwf	sprintf@prec+1,f
  1682  0147                     l1470:	
  1683                           
  1684                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1685  0147  01CB               	clrf	sprintf@c
  1686  0148  0ACB               	incf	sprintf@c,f
  1687  0149  084B               	movf	sprintf@c,w
  1688  014A  3A0A               	xorlw	10
  1689  014B  1903               	btfsc	3,2
  1690  014C  2989               	goto	l1482
  1691  014D                     l1474:	
  1692                           
  1693                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1694  014D  084B               	movf	sprintf@c,w
  1695  014E  00BB               	movwf	??_sprintf
  1696  014F  3001               	movlw	1
  1697  0150                     u1755:	
  1698  0150  1003               	clrc
  1699  0151  0DBB               	rlf	??_sprintf,f
  1700  0152  3EFF               	addlw	-1
  1701  0153  1D03               	skipz
  1702  0154  2950               	goto	u1755
  1703  0155  1003               	clrc
  1704  0156  0D3B               	rlf	??_sprintf,w
  1705  0157  3E01               	addlw	low (_dpowers-__stringbase)
  1706  0158  0084               	movwf	4
  1707  0159  120A  158A  200A  120A  118A  	fcall	stringdir
  1708  015E  00BC               	movwf	??_sprintf+1
  1709  015F  120A  158A  200A  120A  118A  	fcall	stringdir
  1710  0164  00BD               	movwf	??_sprintf+2
  1711  0165  120A  158A  200A  120A  118A  	fcall	stringdir
  1712  016A  00BE               	movwf	??_sprintf+3
  1713  016B  120A  158A  200A  120A  118A  	fcall	stringdir
  1714  0170  00BF               	movwf	??_sprintf+4
  1715  0171  083F               	movf	??_sprintf+4,w
  1716  0172  0245               	subwf	sprintf@_val+3,w
  1717  0173  1D03               	skipz
  1718  0174  297F               	goto	u1765
  1719  0175  083E               	movf	??_sprintf+3,w
  1720  0176  0244               	subwf	sprintf@_val+2,w
  1721  0177  1D03               	skipz
  1722  0178  297F               	goto	u1765
  1723  0179  083D               	movf	??_sprintf+2,w
  1724  017A  0243               	subwf	sprintf@_val+1,w
  1725  017B  1D03               	skipz
  1726  017C  297F               	goto	u1765
  1727  017D  083C               	movf	??_sprintf+1,w
  1728  017E  0242               	subwf	sprintf@_val,w
  1729  017F                     u1765:	
  1730  017F  1C03               	btfss	3,0
  1731  0180  2989               	goto	l1482
  1732                           
  1733                           ;doprnt.c: 1316: break;
  1734  0181  3001               	movlw	1
  1735  0182  00BB               	movwf	??_sprintf
  1736  0183  083B               	movf	??_sprintf,w
  1737  0184  07CB               	addwf	sprintf@c,f
  1738  0185  084B               	movf	sprintf@c,w
  1739  0186  3A0A               	xorlw	10
  1740  0187  1D03               	skipz
  1741  0188  294D               	goto	l1474
  1742  0189                     l1482:	
  1743                           
  1744                           ;doprnt.c: 1348: if(c < prec)
  1745  0189  084B               	movf	sprintf@c,w
  1746  018A  00BB               	movwf	??_sprintf
  1747  018B  01BC               	clrf	??_sprintf+1
  1748  018C  1BBB               	btfsc	??_sprintf,7
  1749  018D  03BC               	decf	??_sprintf+1,f
  1750  018E  083C               	movf	??_sprintf+1,w
  1751  018F  3A80               	xorlw	128
  1752  0190  00BD               	movwf	??_sprintf+2
  1753  0191  084A               	movf	sprintf@prec+1,w
  1754  0192  3A80               	xorlw	128
  1755  0193  023D               	subwf	??_sprintf+2,w
  1756  0194  1D03               	skipz
  1757  0195  2998               	goto	u1785
  1758  0196  0849               	movf	sprintf@prec,w
  1759  0197  023B               	subwf	??_sprintf,w
  1760  0198                     u1785:	
  1761  0198  1803               	skipnc
  1762  0199  29A1               	goto	l1486
  1763                           
  1764                           ;doprnt.c: 1349: c = prec;
  1765  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1766  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1767  019C  0849               	movf	sprintf@prec,w
  1768  019D  00BB               	movwf	??_sprintf
  1769  019E  083B               	movf	??_sprintf,w
  1770  019F  00CB               	movwf	sprintf@c
  1771  01A0  29BB               	goto	l1490
  1772  01A1                     l1486:	
  1773                           
  1774                           ;doprnt.c: 1350: else if(prec < c)
  1775  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1776  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1777  01A3  084B               	movf	sprintf@c,w
  1778  01A4  00BB               	movwf	??_sprintf
  1779  01A5  01BC               	clrf	??_sprintf+1
  1780  01A6  1BBB               	btfsc	??_sprintf,7
  1781  01A7  03BC               	decf	??_sprintf+1,f
  1782  01A8  084A               	movf	sprintf@prec+1,w
  1783  01A9  3A80               	xorlw	128
  1784  01AA  00BD               	movwf	??_sprintf+2
  1785  01AB  083C               	movf	??_sprintf+1,w
  1786  01AC  3A80               	xorlw	128
  1787  01AD  023D               	subwf	??_sprintf+2,w
  1788  01AE  1D03               	skipz
  1789  01AF  29B2               	goto	u1795
  1790  01B0  083B               	movf	??_sprintf,w
  1791  01B1  0249               	subwf	sprintf@prec,w
  1792  01B2                     u1795:	
  1793  01B2  1803               	skipnc
  1794  01B3  29BB               	goto	l1490
  1795                           
  1796                           ;doprnt.c: 1351: prec = c;
  1797  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1798  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1799  01B6  084B               	movf	sprintf@c,w
  1800  01B7  00C9               	movwf	sprintf@prec
  1801  01B8  01CA               	clrf	sprintf@prec+1
  1802  01B9  1BC9               	btfsc	sprintf@prec,7
  1803  01BA  03CA               	decf	sprintf@prec+1,f
  1804  01BB                     l1490:	
  1805                           
  1806                           ;doprnt.c: 1390: if(width > c)
  1807  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1808  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1809  01BD  084B               	movf	sprintf@c,w
  1810  01BE  00BB               	movwf	??_sprintf
  1811  01BF  01BC               	clrf	??_sprintf+1
  1812  01C0  1BBB               	btfsc	??_sprintf,7
  1813  01C1  03BC               	decf	??_sprintf+1,f
  1814  01C2  083C               	movf	??_sprintf+1,w
  1815  01C3  3A80               	xorlw	128
  1816  01C4  00BD               	movwf	??_sprintf+2
  1817  01C5  0848               	movf	sprintf@width+1,w
  1818  01C6  3A80               	xorlw	128
  1819  01C7  023D               	subwf	??_sprintf+2,w
  1820  01C8  1D03               	skipz
  1821  01C9  29CC               	goto	u1805
  1822  01CA  0847               	movf	sprintf@width,w
  1823  01CB  023B               	subwf	??_sprintf,w
  1824  01CC                     u1805:	
  1825  01CC  1803               	skipnc
  1826  01CD  29DC               	goto	l1494
  1827                           
  1828                           ;doprnt.c: 1391: width -= c;
  1829  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  1830  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  1831  01D0  084B               	movf	sprintf@c,w
  1832  01D1  00BB               	movwf	??_sprintf
  1833  01D2  01BC               	clrf	??_sprintf+1
  1834  01D3  1BBB               	btfsc	??_sprintf,7
  1835  01D4  03BC               	decf	??_sprintf+1,f
  1836  01D5  083B               	movf	??_sprintf,w
  1837  01D6  02C7               	subwf	sprintf@width,f
  1838  01D7  083C               	movf	??_sprintf+1,w
  1839  01D8  1C03               	skipc
  1840  01D9  03C8               	decf	sprintf@width+1,f
  1841  01DA  02C8               	subwf	sprintf@width+1,f
  1842  01DB  29E0               	goto	l1496
  1843  01DC                     l1494:	
  1844                           
  1845                           ;doprnt.c: 1392: else
  1846                           ;doprnt.c: 1393: width = 0;
  1847  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1848  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1849  01DE  01C7               	clrf	sprintf@width
  1850  01DF  01C8               	clrf	sprintf@width+1
  1851  01E0                     l1496:	
  1852                           
  1853                           ;doprnt.c: 1431: {
  1854                           ;doprnt.c: 1433: if(width
  1855                           ;doprnt.c: 1437: )
  1856  01E0  0848               	movf	sprintf@width+1,w
  1857  01E1  0447               	iorwf	sprintf@width,w
  1858  01E2  1903               	skipnz
  1859  01E3  2A50               	goto	l1510
  1860                           
  1861                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  1862                           
  1863                           ;doprnt.c: 1438: do
  1864  01E4  3020               	movlw	32
  1865  01E5  00BB               	movwf	??_sprintf
  1866  01E6  0846               	movf	sprintf@sp,w
  1867  01E7  0084               	movwf	4
  1868  01E8  083B               	movf	??_sprintf,w
  1869  01E9  1383               	bcf	3,7	;select IRP bank0
  1870  01EA  0080               	movwf	0
  1871  01EB  3001               	movlw	1
  1872  01EC  00BB               	movwf	??_sprintf
  1873  01ED  083B               	movf	??_sprintf,w
  1874  01EE  07C6               	addwf	sprintf@sp,f
  1875                           
  1876                           ;doprnt.c: 1440: while(--width);
  1877  01EF  30FF               	movlw	255
  1878  01F0  07C7               	addwf	sprintf@width,f
  1879  01F1  1803               	skipnc
  1880  01F2  0AC8               	incf	sprintf@width+1,f
  1881  01F3  30FF               	movlw	255
  1882  01F4  07C8               	addwf	sprintf@width+1,f
  1883  01F5  29E0               	goto	l1496
  1884  01F6                     l1504:	
  1885                           ;doprnt.c: 1478: }
  1886                           ;doprnt.c: 1483: while(prec--) {
  1887                           
  1888                           
  1889                           ;doprnt.c: 1487: {
  1890                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1891  01F6  3000               	movlw	0
  1892  01F7  00AB               	movwf	___llmod@divisor+3
  1893  01F8  3000               	movlw	0
  1894  01F9  00AA               	movwf	___llmod@divisor+2
  1895  01FA  3000               	movlw	0
  1896  01FB  00A9               	movwf	___llmod@divisor+1
  1897  01FC  300A               	movlw	10
  1898  01FD  00A8               	movwf	___llmod@divisor
  1899  01FE  0849               	movf	sprintf@prec,w
  1900  01FF  00BB               	movwf	??_sprintf
  1901  0200  3001               	movlw	1
  1902  0201                     u1835:	
  1903  0201  1003               	clrc
  1904  0202  0DBB               	rlf	??_sprintf,f
  1905  0203  3EFF               	addlw	-1
  1906  0204  1D03               	skipz
  1907  0205  2A01               	goto	u1835
  1908  0206  1003               	clrc
  1909  0207  0D3B               	rlf	??_sprintf,w
  1910  0208  3E01               	addlw	low (_dpowers-__stringbase)
  1911  0209  0084               	movwf	4
  1912  020A  120A  158A  200A  120A  118A  	fcall	stringdir
  1913  020F  00A0               	movwf	___lldiv@divisor
  1914  0210  120A  158A  200A  120A  118A  	fcall	stringdir
  1915  0215  00A1               	movwf	___lldiv@divisor+1
  1916  0216  120A  158A  200A  120A  118A  	fcall	stringdir
  1917  021B  00A2               	movwf	___lldiv@divisor+2
  1918  021C  120A  158A  200A  120A  118A  	fcall	stringdir
  1919  0221  00A3               	movwf	___lldiv@divisor+3
  1920  0222  0845               	movf	sprintf@_val+3,w
  1921  0223  00A7               	movwf	___lldiv@dividend+3
  1922  0224  0844               	movf	sprintf@_val+2,w
  1923  0225  00A6               	movwf	___lldiv@dividend+2
  1924  0226  0843               	movf	sprintf@_val+1,w
  1925  0227  00A5               	movwf	___lldiv@dividend+1
  1926  0228  0842               	movf	sprintf@_val,w
  1927  0229  00A4               	movwf	___lldiv@dividend
  1928  022A  120A  118A  2756  120A  118A  	fcall	___lldiv
  1929  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1931  0231  0823               	movf	?___lldiv+3,w
  1932  0232  00AF               	movwf	___llmod@dividend+3
  1933  0233  0822               	movf	?___lldiv+2,w
  1934  0234  00AE               	movwf	___llmod@dividend+2
  1935  0235  0821               	movf	?___lldiv+1,w
  1936  0236  00AD               	movwf	___llmod@dividend+1
  1937  0237  0820               	movf	?___lldiv,w
  1938  0238  00AC               	movwf	___llmod@dividend
  1939  0239  120A  158A  275B  120A  118A  	fcall	___llmod
  1940  023E  1283               	bcf	3,5	;RP0=0, select bank0
  1941  023F  1303               	bcf	3,6	;RP1=0, select bank0
  1942  0240  0828               	movf	?___llmod,w
  1943  0241  3E30               	addlw	48
  1944  0242  00BC               	movwf	??_sprintf+1
  1945  0243  083C               	movf	??_sprintf+1,w
  1946  0244  00CB               	movwf	sprintf@c
  1947                           
  1948                           ;doprnt.c: 1532: }
  1949                           ;doprnt.c: 1533: ((*sp++ = (c)));
  1950  0245  084B               	movf	sprintf@c,w
  1951  0246  00BB               	movwf	??_sprintf
  1952  0247  0846               	movf	sprintf@sp,w
  1953  0248  0084               	movwf	4
  1954  0249  083B               	movf	??_sprintf,w
  1955  024A  1383               	bcf	3,7	;select IRP bank0
  1956  024B  0080               	movwf	0
  1957  024C  3001               	movlw	1
  1958  024D  00BB               	movwf	??_sprintf
  1959  024E  083B               	movf	??_sprintf,w
  1960  024F  07C6               	addwf	sprintf@sp,f
  1961  0250                     l1510:	
  1962  0250  30FF               	movlw	255
  1963  0251  07C9               	addwf	sprintf@prec,f
  1964  0252  1803               	skipnc
  1965  0253  0ACA               	incf	sprintf@prec+1,f
  1966  0254  30FF               	movlw	255
  1967  0255  07CA               	addwf	sprintf@prec+1,f
  1968  0256  30FF               	movlw	255
  1969  0257  064A               	xorwf	sprintf@prec+1,w
  1970  0258  1D03               	skipz
  1971  0259  2A5C               	goto	u1845
  1972  025A  30FF               	movlw	255
  1973  025B  0649               	xorwf	sprintf@prec,w
  1974  025C                     u1845:	
  1975  025C  1903               	btfsc	3,2
  1976  025D  282F               	goto	l1512
  1977  025E  29F6               	goto	l1504
  1978  025F                     l1514:	
  1979                           ;doprnt.c: 1534: }
  1980                           ;doprnt.c: 1542: }
  1981                           ;doprnt.c: 1544: alldone:
  1982                           
  1983                           
  1984                           ;doprnt.c: 1547: *sp = 0;
  1985  025F  0846               	movf	sprintf@sp,w
  1986  0260  0084               	movwf	4
  1987  0261  1383               	bcf	3,7	;select IRP bank0
  1988  0262  0180               	clrf	0
  1989  0263  0008               	return
  1990  0264                     __end_of_sprintf:	
  1991                           ;doprnt.c: 1549: return 0;
  1992                           ;	Return value of _sprintf is never used
  1993                           
  1994                           
  1995                           	psect	text4
  1996  0E42                     __ptext4:	
  1997 ;; *************** function _isdigit *****************
  1998 ;; Defined at:
  1999 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  c               1    wreg     unsigned char 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  c               1    5[COMMON] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;		None               void
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2013 ;;      Params:         0       0       0       0       0
  2014 ;;      Locals:         2       0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0
  2016 ;;      Totals:         2       0       0       0       0
  2017 ;;Total ram usage:        2 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    1
  2020 ;; This function calls:
  2021 ;;		Nothing
  2022 ;; This function is called by:
  2023 ;;		_sprintf
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           
  2028                           ;psect for function _isdigit
  2029  0E42                     _isdigit:	
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2033                           ;isdigit@c stored from wreg
  2034  0E42  00F5               	movwf	isdigit@c
  2035  0E43  01F4               	clrf	_isdigit$512
  2036  0E44  303A               	movlw	58
  2037  0E45  0275               	subwf	isdigit@c,w
  2038  0E46  1803               	skipnc
  2039  0E47  2E4E               	goto	l1266
  2040  0E48  3030               	movlw	48
  2041  0E49  0275               	subwf	isdigit@c,w
  2042  0E4A  1C03               	skipc
  2043  0E4B  2E4E               	goto	l1266
  2044  0E4C  01F4               	clrf	_isdigit$512
  2045  0E4D  0AF4               	incf	_isdigit$512,f
  2046  0E4E                     l1266:	
  2047  0E4E  0C74               	rrf	_isdigit$512,w
  2048  0E4F  0008               	return
  2049  0E50                     __end_of_isdigit:	
  2050                           
  2051                           	psect	text5
  2052  0F10                     __ptext5:	
  2053 ;; *************** function ___wmul *****************
  2054 ;; Defined at:
  2055 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  multiplier      2    4[COMMON] unsigned int 
  2058 ;;  multiplicand    2    6[COMMON] unsigned int 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  product         2    8[COMMON] unsigned int 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  2    4[COMMON] unsigned int 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2070 ;;      Params:         4       0       0       0       0
  2071 ;;      Locals:         2       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0
  2073 ;;      Totals:         6       0       0       0       0
  2074 ;;Total ram usage:        6 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    1
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_sprintf
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           
  2085                           ;psect for function ___wmul
  2086  0F10                     ___wmul:	
  2087                           
  2088                           ;incstack = 0
  2089                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2090  0F10  01F8               	clrf	___wmul@product
  2091  0F11  01F9               	clrf	___wmul@product+1
  2092  0F12                     l1272:	
  2093  0F12  1C74               	btfss	___wmul@multiplier,0
  2094  0F13  2F1A               	goto	l224
  2095  0F14  0876               	movf	___wmul@multiplicand,w
  2096  0F15  07F8               	addwf	___wmul@product,f
  2097  0F16  1803               	skipnc
  2098  0F17  0AF9               	incf	___wmul@product+1,f
  2099  0F18  0877               	movf	___wmul@multiplicand+1,w
  2100  0F19  07F9               	addwf	___wmul@product+1,f
  2101  0F1A                     l224:	
  2102  0F1A  3001               	movlw	1
  2103  0F1B                     u1265:	
  2104  0F1B  1003               	clrc
  2105  0F1C  0DF6               	rlf	___wmul@multiplicand,f
  2106  0F1D  0DF7               	rlf	___wmul@multiplicand+1,f
  2107  0F1E  3EFF               	addlw	-1
  2108  0F1F  1D03               	skipz
  2109  0F20  2F1B               	goto	u1265
  2110  0F21  3001               	movlw	1
  2111  0F22                     u1275:	
  2112  0F22  1003               	clrc
  2113  0F23  0CF5               	rrf	___wmul@multiplier+1,f
  2114  0F24  0CF4               	rrf	___wmul@multiplier,f
  2115  0F25  3EFF               	addlw	-1
  2116  0F26  1D03               	skipz
  2117  0F27  2F22               	goto	u1275
  2118  0F28  0875               	movf	___wmul@multiplier+1,w
  2119  0F29  0474               	iorwf	___wmul@multiplier,w
  2120  0F2A  1D03               	skipz
  2121  0F2B  2F12               	goto	l1272
  2122  0F2C  0879               	movf	___wmul@product+1,w
  2123  0F2D  01F5               	clrf	?___wmul+1
  2124  0F2E  07F5               	addwf	?___wmul+1,f
  2125  0F2F  0878               	movf	___wmul@product,w
  2126  0F30  01F4               	clrf	?___wmul
  2127  0F31  07F4               	addwf	?___wmul,f
  2128  0F32  0008               	return
  2129  0F33                     __end_of___wmul:	
  2130                           
  2131                           	psect	text6
  2132  0F5B                     __ptext6:	
  2133 ;; *************** function ___llmod *****************
  2134 ;; Defined at:
  2135 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  divisor         4    8[BANK0 ] unsigned long 
  2138 ;;  dividend        4   12[BANK0 ] unsigned long 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  counter         1   17[BANK0 ] unsigned char 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  4    8[BANK0 ] unsigned long 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2150 ;;      Params:         0       8       0       0       0
  2151 ;;      Locals:         0       1       0       0       0
  2152 ;;      Temps:          0       1       0       0       0
  2153 ;;      Totals:         0      10       0       0       0
  2154 ;;Total ram usage:       10 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    1
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_sprintf
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           
  2165                           ;psect for function ___llmod
  2166  0F5B                     ___llmod:	
  2167                           
  2168                           ;incstack = 0
  2169                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2170  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  2171  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  2172  0F5D  082B               	movf	___llmod@divisor+3,w
  2173  0F5E  042A               	iorwf	___llmod@divisor+2,w
  2174  0F5F  0429               	iorwf	___llmod@divisor+1,w
  2175  0F60  0428               	iorwf	___llmod@divisor,w
  2176  0F61  1903               	skipnz
  2177  0F62  2FA0               	goto	l1394
  2178  0F63  01B1               	clrf	___llmod@counter
  2179  0F64  0AB1               	incf	___llmod@counter,f
  2180  0F65                     l1384:	
  2181  0F65  1BAB               	btfsc	___llmod@divisor+3,7
  2182  0F66  2F75               	goto	l1386
  2183  0F67  3001               	movlw	1
  2184  0F68  00B0               	movwf	??___llmod
  2185  0F69                     u1615:	
  2186  0F69  1003               	clrc
  2187  0F6A  0DA8               	rlf	___llmod@divisor,f
  2188  0F6B  0DA9               	rlf	___llmod@divisor+1,f
  2189  0F6C  0DAA               	rlf	___llmod@divisor+2,f
  2190  0F6D  0DAB               	rlf	___llmod@divisor+3,f
  2191  0F6E  0BB0               	decfsz	??___llmod,f
  2192  0F6F  2F69               	goto	u1615
  2193  0F70  3001               	movlw	1
  2194  0F71  00B0               	movwf	??___llmod
  2195  0F72  0830               	movf	??___llmod,w
  2196  0F73  07B1               	addwf	___llmod@counter,f
  2197  0F74  2F65               	goto	l1384
  2198  0F75                     l1386:	
  2199  0F75  082B               	movf	___llmod@divisor+3,w
  2200  0F76  022F               	subwf	___llmod@dividend+3,w
  2201  0F77  1D03               	skipz
  2202  0F78  2F83               	goto	u1635
  2203  0F79  082A               	movf	___llmod@divisor+2,w
  2204  0F7A  022E               	subwf	___llmod@dividend+2,w
  2205  0F7B  1D03               	skipz
  2206  0F7C  2F83               	goto	u1635
  2207  0F7D  0829               	movf	___llmod@divisor+1,w
  2208  0F7E  022D               	subwf	___llmod@dividend+1,w
  2209  0F7F  1D03               	skipz
  2210  0F80  2F83               	goto	u1635
  2211  0F81  0828               	movf	___llmod@divisor,w
  2212  0F82  022C               	subwf	___llmod@dividend,w
  2213  0F83                     u1635:	
  2214  0F83  1C03               	skipc
  2215  0F84  2F93               	goto	l1390
  2216  0F85  0828               	movf	___llmod@divisor,w
  2217  0F86  02AC               	subwf	___llmod@dividend,f
  2218  0F87  0829               	movf	___llmod@divisor+1,w
  2219  0F88  1C03               	skipc
  2220  0F89  0F29               	incfsz	___llmod@divisor+1,w
  2221  0F8A  02AD               	subwf	___llmod@dividend+1,f
  2222  0F8B  082A               	movf	___llmod@divisor+2,w
  2223  0F8C  1C03               	skipc
  2224  0F8D  0F2A               	incfsz	___llmod@divisor+2,w
  2225  0F8E  02AE               	subwf	___llmod@dividend+2,f
  2226  0F8F  082B               	movf	___llmod@divisor+3,w
  2227  0F90  1C03               	skipc
  2228  0F91  0F2B               	incfsz	___llmod@divisor+3,w
  2229  0F92  02AF               	subwf	___llmod@dividend+3,f
  2230  0F93                     l1390:	
  2231  0F93  3001               	movlw	1
  2232  0F94                     u1645:	
  2233  0F94  1003               	clrc
  2234  0F95  0CAB               	rrf	___llmod@divisor+3,f
  2235  0F96  0CAA               	rrf	___llmod@divisor+2,f
  2236  0F97  0CA9               	rrf	___llmod@divisor+1,f
  2237  0F98  0CA8               	rrf	___llmod@divisor,f
  2238  0F99  3EFF               	addlw	-1
  2239  0F9A  1D03               	skipz
  2240  0F9B  2F94               	goto	u1645
  2241  0F9C  3001               	movlw	1
  2242  0F9D  02B1               	subwf	___llmod@counter,f
  2243  0F9E  1D03               	btfss	3,2
  2244  0F9F  2F75               	goto	l1386
  2245  0FA0                     l1394:	
  2246  0FA0  082F               	movf	___llmod@dividend+3,w
  2247  0FA1  00AB               	movwf	?___llmod+3
  2248  0FA2  082E               	movf	___llmod@dividend+2,w
  2249  0FA3  00AA               	movwf	?___llmod+2
  2250  0FA4  082D               	movf	___llmod@dividend+1,w
  2251  0FA5  00A9               	movwf	?___llmod+1
  2252  0FA6  082C               	movf	___llmod@dividend,w
  2253  0FA7  00A8               	movwf	?___llmod
  2254  0FA8  0008               	return
  2255  0FA9                     __end_of___llmod:	
  2256                           
  2257                           	psect	text7
  2258  0756                     __ptext7:	
  2259 ;; *************** function ___lldiv *****************
  2260 ;; Defined at:
  2261 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;  divisor         4    0[BANK0 ] unsigned long 
  2264 ;;  dividend        4    4[BANK0 ] unsigned long 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  quotient        4    5[COMMON] unsigned long 
  2267 ;;  counter         1    9[COMMON] unsigned char 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  4    0[BANK0 ] unsigned long 
  2270 ;; Registers used:
  2271 ;;		wreg, status,2, status,0
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2277 ;;      Params:         0       8       0       0       0
  2278 ;;      Locals:         5       0       0       0       0
  2279 ;;      Temps:          1       0       0       0       0
  2280 ;;      Totals:         6       8       0       0       0
  2281 ;;Total ram usage:       14 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    1
  2284 ;; This function calls:
  2285 ;;		Nothing
  2286 ;; This function is called by:
  2287 ;;		_sprintf
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           
  2292                           ;psect for function ___lldiv
  2293  0756                     ___lldiv:	
  2294                           
  2295                           ;incstack = 0
  2296                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2297  0756  3000               	movlw	0
  2298  0757  00F8               	movwf	___lldiv@quotient+3
  2299  0758  3000               	movlw	0
  2300  0759  00F7               	movwf	___lldiv@quotient+2
  2301  075A  3000               	movlw	0
  2302  075B  00F6               	movwf	___lldiv@quotient+1
  2303  075C  3000               	movlw	0
  2304  075D  00F5               	movwf	___lldiv@quotient
  2305  075E  1283               	bcf	3,5	;RP0=0, select bank0
  2306  075F  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0760  0823               	movf	___lldiv@divisor+3,w
  2308  0761  0422               	iorwf	___lldiv@divisor+2,w
  2309  0762  0421               	iorwf	___lldiv@divisor+1,w
  2310  0763  0420               	iorwf	___lldiv@divisor,w
  2311  0764  1903               	skipnz
  2312  0765  2FAD               	goto	l1374
  2313  0766  01F9               	clrf	___lldiv@counter
  2314  0767  0AF9               	incf	___lldiv@counter,f
  2315  0768                     l1360:	
  2316  0768  1BA3               	btfsc	___lldiv@divisor+3,7
  2317  0769  2F78               	goto	l1362
  2318  076A  3001               	movlw	1
  2319  076B  00F4               	movwf	??___lldiv
  2320  076C                     u1545:	
  2321  076C  1003               	clrc
  2322  076D  0DA0               	rlf	___lldiv@divisor,f
  2323  076E  0DA1               	rlf	___lldiv@divisor+1,f
  2324  076F  0DA2               	rlf	___lldiv@divisor+2,f
  2325  0770  0DA3               	rlf	___lldiv@divisor+3,f
  2326  0771  0BF4               	decfsz	??___lldiv,f
  2327  0772  2F6C               	goto	u1545
  2328  0773  3001               	movlw	1
  2329  0774  00F4               	movwf	??___lldiv
  2330  0775  0874               	movf	??___lldiv,w
  2331  0776  07F9               	addwf	___lldiv@counter,f
  2332  0777  2F68               	goto	l1360
  2333  0778                     l1362:	
  2334  0778  3001               	movlw	1
  2335  0779  00F4               	movwf	??___lldiv
  2336  077A                     u1565:	
  2337  077A  1003               	clrc
  2338  077B  0DF5               	rlf	___lldiv@quotient,f
  2339  077C  0DF6               	rlf	___lldiv@quotient+1,f
  2340  077D  0DF7               	rlf	___lldiv@quotient+2,f
  2341  077E  0DF8               	rlf	___lldiv@quotient+3,f
  2342  077F  0BF4               	decfsz	??___lldiv,f
  2343  0780  2F7A               	goto	u1565
  2344  0781  0823               	movf	___lldiv@divisor+3,w
  2345  0782  0227               	subwf	___lldiv@dividend+3,w
  2346  0783  1D03               	skipz
  2347  0784  2F8F               	goto	u1575
  2348  0785  0822               	movf	___lldiv@divisor+2,w
  2349  0786  0226               	subwf	___lldiv@dividend+2,w
  2350  0787  1D03               	skipz
  2351  0788  2F8F               	goto	u1575
  2352  0789  0821               	movf	___lldiv@divisor+1,w
  2353  078A  0225               	subwf	___lldiv@dividend+1,w
  2354  078B  1D03               	skipz
  2355  078C  2F8F               	goto	u1575
  2356  078D  0820               	movf	___lldiv@divisor,w
  2357  078E  0224               	subwf	___lldiv@dividend,w
  2358  078F                     u1575:	
  2359  078F  1C03               	skipc
  2360  0790  2FA0               	goto	l1370
  2361  0791  0820               	movf	___lldiv@divisor,w
  2362  0792  02A4               	subwf	___lldiv@dividend,f
  2363  0793  0821               	movf	___lldiv@divisor+1,w
  2364  0794  1C03               	skipc
  2365  0795  0F21               	incfsz	___lldiv@divisor+1,w
  2366  0796  02A5               	subwf	___lldiv@dividend+1,f
  2367  0797  0822               	movf	___lldiv@divisor+2,w
  2368  0798  1C03               	skipc
  2369  0799  0F22               	incfsz	___lldiv@divisor+2,w
  2370  079A  02A6               	subwf	___lldiv@dividend+2,f
  2371  079B  0823               	movf	___lldiv@divisor+3,w
  2372  079C  1C03               	skipc
  2373  079D  0F23               	incfsz	___lldiv@divisor+3,w
  2374  079E  02A7               	subwf	___lldiv@dividend+3,f
  2375  079F  1475               	bsf	___lldiv@quotient,0
  2376  07A0                     l1370:	
  2377  07A0  3001               	movlw	1
  2378  07A1                     u1585:	
  2379  07A1  1003               	clrc
  2380  07A2  0CA3               	rrf	___lldiv@divisor+3,f
  2381  07A3  0CA2               	rrf	___lldiv@divisor+2,f
  2382  07A4  0CA1               	rrf	___lldiv@divisor+1,f
  2383  07A5  0CA0               	rrf	___lldiv@divisor,f
  2384  07A6  3EFF               	addlw	-1
  2385  07A7  1D03               	skipz
  2386  07A8  2FA1               	goto	u1585
  2387  07A9  3001               	movlw	1
  2388  07AA  02F9               	subwf	___lldiv@counter,f
  2389  07AB  1D03               	btfss	3,2
  2390  07AC  2F78               	goto	l1362
  2391  07AD                     l1374:	
  2392  07AD  0878               	movf	___lldiv@quotient+3,w
  2393  07AE  00A3               	movwf	?___lldiv+3
  2394  07AF  0877               	movf	___lldiv@quotient+2,w
  2395  07B0  00A2               	movwf	?___lldiv+2
  2396  07B1  0876               	movf	___lldiv@quotient+1,w
  2397  07B2  00A1               	movwf	?___lldiv+1
  2398  07B3  0875               	movf	___lldiv@quotient,w
  2399  07B4  00A0               	movwf	?___lldiv
  2400  07B5  0008               	return
  2401  07B6                     __end_of___lldiv:	
  2402                           
  2403                           	psect	text8
  2404  07B6                     __ptext8:	
  2405 ;; *************** function ___lltoft *****************
  2406 ;; Defined at:
  2407 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  c               4    3[BANK0 ] unsigned long 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  exp             1    7[BANK0 ] unsigned char 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  3    3[BANK0 ] float 
  2414 ;; Registers used:
  2415 ;;		wreg, status,2, status,0, pclath, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2421 ;;      Params:         0       4       0       0       0
  2422 ;;      Locals:         0       1       0       0       0
  2423 ;;      Temps:          1       0       0       0       0
  2424 ;;      Totals:         1       5       0       0       0
  2425 ;;Total ram usage:        6 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    2
  2428 ;; This function calls:
  2429 ;;		___ftpack
  2430 ;; This function is called by:
  2431 ;;		_ftoa
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function ___lltoft
  2437  07B6                     ___lltoft:	
  2438                           
  2439                           ;incstack = 0
  2440                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  2441  07B6  308E               	movlw	142
  2442  07B7  00F9               	movwf	??___lltoft
  2443  07B8  0879               	movf	??___lltoft,w
  2444  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  2445  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  2446  07BB  00A7               	movwf	___lltoft@exp
  2447  07BC                     l1650:	
  2448  07BC  30FF               	movlw	255
  2449  07BD  0526               	andwf	___lltoft@c+3,w
  2450  07BE  1903               	btfsc	3,2
  2451  07BF  2FCE               	goto	l1652
  2452  07C0  3001               	movlw	1
  2453  07C1                     u2165:	
  2454  07C1  1003               	clrc
  2455  07C2  0CA6               	rrf	___lltoft@c+3,f
  2456  07C3  0CA5               	rrf	___lltoft@c+2,f
  2457  07C4  0CA4               	rrf	___lltoft@c+1,f
  2458  07C5  0CA3               	rrf	___lltoft@c,f
  2459  07C6  3EFF               	addlw	-1
  2460  07C7  1D03               	skipz
  2461  07C8  2FC1               	goto	u2165
  2462  07C9  3001               	movlw	1
  2463  07CA  00F9               	movwf	??___lltoft
  2464  07CB  0879               	movf	??___lltoft,w
  2465  07CC  07A7               	addwf	___lltoft@exp,f
  2466  07CD  2FBC               	goto	l1650
  2467  07CE                     l1652:	
  2468  07CE  0823               	movf	___lltoft@c,w
  2469  07CF  00F4               	movwf	___ftpack@arg
  2470  07D0  0824               	movf	___lltoft@c+1,w
  2471  07D1  00F5               	movwf	___ftpack@arg+1
  2472  07D2  0825               	movf	___lltoft@c+2,w
  2473  07D3  00F6               	movwf	___ftpack@arg+2
  2474  07D4  0827               	movf	___lltoft@exp,w
  2475  07D5  00F9               	movwf	??___lltoft
  2476  07D6  0879               	movf	??___lltoft,w
  2477  07D7  00F7               	movwf	___ftpack@exp
  2478  07D8  01F8               	clrf	___ftpack@sign
  2479  07D9  120A  118A  2687   	fcall	___ftpack
  2480  07DC  0874               	movf	?___ftpack,w
  2481  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  2482  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  2483  07DF  00A3               	movwf	?___lltoft
  2484  07E0  0875               	movf	?___ftpack+1,w
  2485  07E1  00A4               	movwf	?___lltoft+1
  2486  07E2  0876               	movf	?___ftpack+2,w
  2487  07E3  00A5               	movwf	?___lltoft+2
  2488  07E4  0008               	return
  2489  07E5                     __end_of___lltoft:	
  2490                           
  2491                           	psect	text9
  2492  05F9                     __ptext9:	
  2493 ;; *************** function ___fttol *****************
  2494 ;; Defined at:
  2495 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  f1              3   22[BANK0 ] float 
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  lval            4   31[BANK0 ] unsigned long 
  2500 ;;  exp1            1   35[BANK0 ] unsigned char 
  2501 ;;  sign1           1   30[BANK0 ] unsigned char 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  4   22[BANK0 ] long 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2511 ;;      Params:         0       4       0       0       0
  2512 ;;      Locals:         0       6       0       0       0
  2513 ;;      Temps:          0       4       0       0       0
  2514 ;;      Totals:         0      14       0       0       0
  2515 ;;Total ram usage:       14 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; Hardware stack levels required when called:    1
  2518 ;; This function calls:
  2519 ;;		Nothing
  2520 ;; This function is called by:
  2521 ;;		_ftoa
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           
  2526                           ;psect for function ___fttol
  2527  05F9                     ___fttol:	
  2528                           
  2529                           ;incstack = 0
  2530                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2531  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  2532  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  2533  05FB  0836               	movf	___fttol@f1,w
  2534  05FC  00BA               	movwf	??___fttol
  2535  05FD  0837               	movf	___fttol@f1+1,w
  2536  05FE  00BB               	movwf	??___fttol+1
  2537  05FF  0838               	movf	___fttol@f1+2,w
  2538  0600  00BC               	movwf	??___fttol+2
  2539  0601  1003               	clrc
  2540  0602  0D3B               	rlf	??___fttol+1,w
  2541  0603  0D3C               	rlf	??___fttol+2,w
  2542  0604  00BD               	movwf	??___fttol+3
  2543  0605  083D               	movf	??___fttol+3,w
  2544  0606  00C3               	movwf	___fttol@exp1
  2545  0607  08C3               	movf	___fttol@exp1,f
  2546  0608  1D03               	skipz
  2547  0609  2E13               	goto	l1608
  2548  060A  3000               	movlw	0
  2549  060B  00B9               	movwf	?___fttol+3
  2550  060C  3000               	movlw	0
  2551  060D  00B8               	movwf	?___fttol+2
  2552  060E  3000               	movlw	0
  2553  060F  00B7               	movwf	?___fttol+1
  2554  0610  3000               	movlw	0
  2555  0611  00B6               	movwf	?___fttol
  2556  0612  0008               	return
  2557  0613                     l1608:	
  2558  0613  0836               	movf	___fttol@f1,w
  2559  0614  00BA               	movwf	??___fttol
  2560  0615  0837               	movf	___fttol@f1+1,w
  2561  0616  00BB               	movwf	??___fttol+1
  2562  0617  0838               	movf	___fttol@f1+2,w
  2563  0618  00BC               	movwf	??___fttol+2
  2564  0619  3017               	movlw	23
  2565  061A                     u2075:	
  2566  061A  1003               	clrc
  2567  061B  0CBC               	rrf	??___fttol+2,f
  2568  061C  0CBB               	rrf	??___fttol+1,f
  2569  061D  0CBA               	rrf	??___fttol,f
  2570  061E  3EFF               	addlw	-1
  2571  061F  1D03               	skipz
  2572  0620  2E1A               	goto	u2075
  2573  0621  083A               	movf	??___fttol,w
  2574  0622  00BD               	movwf	??___fttol+3
  2575  0623  083D               	movf	??___fttol+3,w
  2576  0624  00BE               	movwf	___fttol@sign1
  2577  0625  17B7               	bsf	___fttol@f1+1,7
  2578  0626  30FF               	movlw	255
  2579  0627  05B6               	andwf	___fttol@f1,f
  2580  0628  30FF               	movlw	255
  2581  0629  05B7               	andwf	___fttol@f1+1,f
  2582  062A  3000               	movlw	0
  2583  062B  05B8               	andwf	___fttol@f1+2,f
  2584  062C  0836               	movf	___fttol@f1,w
  2585  062D  00BF               	movwf	___fttol@lval
  2586  062E  0837               	movf	___fttol@f1+1,w
  2587  062F  00C0               	movwf	___fttol@lval+1
  2588  0630  0838               	movf	___fttol@f1+2,w
  2589  0631  00C1               	movwf	___fttol@lval+2
  2590  0632  01C2               	clrf	___fttol@lval+3
  2591  0633  308E               	movlw	142
  2592  0634  02C3               	subwf	___fttol@exp1,f
  2593  0635  1FC3               	btfss	___fttol@exp1,7
  2594  0636  2E55               	goto	l1628
  2595  0637  0843               	movf	___fttol@exp1,w
  2596  0638  3A80               	xorlw	128
  2597  0639  3E8F               	addlw	143
  2598  063A  1803               	skipnc
  2599  063B  2E45               	goto	l1626
  2600  063C  3000               	movlw	0
  2601  063D  00B9               	movwf	?___fttol+3
  2602  063E  3000               	movlw	0
  2603  063F  00B8               	movwf	?___fttol+2
  2604  0640  3000               	movlw	0
  2605  0641  00B7               	movwf	?___fttol+1
  2606  0642  3000               	movlw	0
  2607  0643  00B6               	movwf	?___fttol
  2608  0644  0008               	return
  2609  0645                     l1626:	
  2610  0645  3001               	movlw	1
  2611  0646                     u2105:	
  2612  0646  1003               	clrc
  2613  0647  0CC2               	rrf	___fttol@lval+3,f
  2614  0648  0CC1               	rrf	___fttol@lval+2,f
  2615  0649  0CC0               	rrf	___fttol@lval+1,f
  2616  064A  0CBF               	rrf	___fttol@lval,f
  2617  064B  3EFF               	addlw	-1
  2618  064C  1D03               	skipz
  2619  064D  2E46               	goto	u2105
  2620  064E  3001               	movlw	1
  2621  064F  00BA               	movwf	??___fttol
  2622  0650  083A               	movf	??___fttol,w
  2623  0651  07C3               	addwf	___fttol@exp1,f
  2624  0652  1903               	btfsc	3,2
  2625  0653  2E70               	goto	l1638
  2626  0654  2E45               	goto	l1626
  2627  0655                     l1628:	
  2628  0655  3018               	movlw	24
  2629  0656  0243               	subwf	___fttol@exp1,w
  2630  0657  1C03               	skipc
  2631  0658  2E6D               	goto	l1636
  2632  0659  3000               	movlw	0
  2633  065A  00B9               	movwf	?___fttol+3
  2634  065B  3000               	movlw	0
  2635  065C  00B8               	movwf	?___fttol+2
  2636  065D  3000               	movlw	0
  2637  065E  00B7               	movwf	?___fttol+1
  2638  065F  3000               	movlw	0
  2639  0660  00B6               	movwf	?___fttol
  2640  0661  0008               	return
  2641  0662                     l1634:	
  2642  0662  3001               	movlw	1
  2643  0663  00BA               	movwf	??___fttol
  2644  0664                     u2135:	
  2645  0664  1003               	clrc
  2646  0665  0DBF               	rlf	___fttol@lval,f
  2647  0666  0DC0               	rlf	___fttol@lval+1,f
  2648  0667  0DC1               	rlf	___fttol@lval+2,f
  2649  0668  0DC2               	rlf	___fttol@lval+3,f
  2650  0669  0BBA               	decfsz	??___fttol,f
  2651  066A  2E64               	goto	u2135
  2652  066B  3001               	movlw	1
  2653  066C  02C3               	subwf	___fttol@exp1,f
  2654  066D                     l1636:	
  2655  066D  08C3               	movf	___fttol@exp1,f
  2656  066E  1D03               	skipz
  2657  066F  2E62               	goto	l1634
  2658  0670                     l1638:	
  2659  0670  083E               	movf	___fttol@sign1,w
  2660  0671  1903               	btfsc	3,2
  2661  0672  2E7E               	goto	l1642
  2662  0673  09BF               	comf	___fttol@lval,f
  2663  0674  09C0               	comf	___fttol@lval+1,f
  2664  0675  09C1               	comf	___fttol@lval+2,f
  2665  0676  09C2               	comf	___fttol@lval+3,f
  2666  0677  0ABF               	incf	___fttol@lval,f
  2667  0678  1903               	skipnz
  2668  0679  0AC0               	incf	___fttol@lval+1,f
  2669  067A  1903               	skipnz
  2670  067B  0AC1               	incf	___fttol@lval+2,f
  2671  067C  1903               	skipnz
  2672  067D  0AC2               	incf	___fttol@lval+3,f
  2673  067E                     l1642:	
  2674  067E  0842               	movf	___fttol@lval+3,w
  2675  067F  00B9               	movwf	?___fttol+3
  2676  0680  0841               	movf	___fttol@lval+2,w
  2677  0681  00B8               	movwf	?___fttol+2
  2678  0682  0840               	movf	___fttol@lval+1,w
  2679  0683  00B7               	movwf	?___fttol+1
  2680  0684  083F               	movf	___fttol@lval,w
  2681  0685  00B6               	movwf	?___fttol
  2682  0686  0008               	return
  2683  0687                     __end_of___fttol:	
  2684                           
  2685                           	psect	text10
  2686  0EAE                     __ptext10:	
  2687 ;; *************** function ___ftsub *****************
  2688 ;; Defined at:
  2689 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  f2              3   16[BANK0 ] float 
  2692 ;;  f1              3   19[BANK0 ] float 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  3   16[BANK0 ] float 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, pclath, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2704 ;;      Params:         0       6       0       0       0
  2705 ;;      Locals:         0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0
  2707 ;;      Totals:         0       6       0       0       0
  2708 ;;Total ram usage:        6 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    3
  2711 ;; This function calls:
  2712 ;;		___ftadd
  2713 ;; This function is called by:
  2714 ;;		_ftoa
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           
  2719                           ;psect for function ___ftsub
  2720  0EAE                     ___ftsub:	
  2721                           
  2722                           ;incstack = 0
  2723                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  2724  0EAE  3080               	movlw	128
  2725  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0EB0  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0EB1  06B2               	xorwf	___ftsub@f2+2,f
  2728  0EB2  0833               	movf	___ftsub@f1,w
  2729  0EB3  00A3               	movwf	___ftadd@f1
  2730  0EB4  0834               	movf	___ftsub@f1+1,w
  2731  0EB5  00A4               	movwf	___ftadd@f1+1
  2732  0EB6  0835               	movf	___ftsub@f1+2,w
  2733  0EB7  00A5               	movwf	___ftadd@f1+2
  2734  0EB8  0830               	movf	___ftsub@f2,w
  2735  0EB9  00A6               	movwf	___ftadd@f2
  2736  0EBA  0831               	movf	___ftsub@f2+1,w
  2737  0EBB  00A7               	movwf	___ftadd@f2+1
  2738  0EBC  0832               	movf	___ftsub@f2+2,w
  2739  0EBD  00A8               	movwf	___ftadd@f2+2
  2740  0EBE  120A  118A  2264   	fcall	___ftadd
  2741  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  2742  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  2743  0EC3  0823               	movf	?___ftadd,w
  2744  0EC4  00B0               	movwf	?___ftsub
  2745  0EC5  0824               	movf	?___ftadd+1,w
  2746  0EC6  00B1               	movwf	?___ftsub+1
  2747  0EC7  0825               	movf	?___ftadd+2,w
  2748  0EC8  00B2               	movwf	?___ftsub+2
  2749  0EC9  0008               	return
  2750  0ECA                     __end_of___ftsub:	
  2751                           
  2752                           	psect	text11
  2753  0264                     __ptext11:	
  2754 ;; *************** function ___ftadd *****************
  2755 ;; Defined at:
  2756 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  f1              3    3[BANK0 ] float 
  2759 ;;  f2              3    6[BANK0 ] float 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  exp1            1   15[BANK0 ] unsigned char 
  2762 ;;  exp2            1   14[BANK0 ] unsigned char 
  2763 ;;  sign            1   13[BANK0 ] unsigned char 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  3    3[BANK0 ] float 
  2766 ;; Registers used:
  2767 ;;		wreg, status,2, status,0, pclath, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2773 ;;      Params:         0       6       0       0       0
  2774 ;;      Locals:         0       3       0       0       0
  2775 ;;      Temps:          0       4       0       0       0
  2776 ;;      Totals:         0      13       0       0       0
  2777 ;;Total ram usage:       13 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    2
  2780 ;; This function calls:
  2781 ;;		___ftpack
  2782 ;; This function is called by:
  2783 ;;		___ftsub
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           
  2788                           ;psect for function ___ftadd
  2789  0264                     ___ftadd:	
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2793  0264  1283               	bcf	3,5	;RP0=0, select bank0
  2794  0265  1303               	bcf	3,6	;RP1=0, select bank0
  2795  0266  0823               	movf	___ftadd@f1,w
  2796  0267  00A9               	movwf	??___ftadd
  2797  0268  0824               	movf	___ftadd@f1+1,w
  2798  0269  00AA               	movwf	??___ftadd+1
  2799  026A  0825               	movf	___ftadd@f1+2,w
  2800  026B  00AB               	movwf	??___ftadd+2
  2801  026C  1003               	clrc
  2802  026D  0D2A               	rlf	??___ftadd+1,w
  2803  026E  0D2B               	rlf	??___ftadd+2,w
  2804  026F  00AC               	movwf	??___ftadd+3
  2805  0270  082C               	movf	??___ftadd+3,w
  2806  0271  00AF               	movwf	___ftadd@exp1
  2807  0272  0826               	movf	___ftadd@f2,w
  2808  0273  00A9               	movwf	??___ftadd
  2809  0274  0827               	movf	___ftadd@f2+1,w
  2810  0275  00AA               	movwf	??___ftadd+1
  2811  0276  0828               	movf	___ftadd@f2+2,w
  2812  0277  00AB               	movwf	??___ftadd+2
  2813  0278  1003               	clrc
  2814  0279  0D2A               	rlf	??___ftadd+1,w
  2815  027A  0D2B               	rlf	??___ftadd+2,w
  2816  027B  00AC               	movwf	??___ftadd+3
  2817  027C  082C               	movf	??___ftadd+3,w
  2818  027D  00AE               	movwf	___ftadd@exp2
  2819  027E  082F               	movf	___ftadd@exp1,w
  2820  027F  1903               	btfsc	3,2
  2821  0280  2A8D               	goto	l1290
  2822  0281  082E               	movf	___ftadd@exp2,w
  2823  0282  022F               	subwf	___ftadd@exp1,w
  2824  0283  1803               	skipnc
  2825  0284  2A94               	goto	l1294
  2826  0285  032F               	decf	___ftadd@exp1,w
  2827  0286  3AFF               	xorlw	255
  2828  0287  072E               	addwf	___ftadd@exp2,w
  2829  0288  00A9               	movwf	??___ftadd
  2830  0289  3019               	movlw	25
  2831  028A  0229               	subwf	??___ftadd,w
  2832  028B  1C03               	skipc
  2833  028C  2A94               	goto	l1294
  2834  028D                     l1290:	
  2835  028D  0826               	movf	___ftadd@f2,w
  2836  028E  00A3               	movwf	?___ftadd
  2837  028F  0827               	movf	___ftadd@f2+1,w
  2838  0290  00A4               	movwf	?___ftadd+1
  2839  0291  0828               	movf	___ftadd@f2+2,w
  2840  0292  00A5               	movwf	?___ftadd+2
  2841  0293  0008               	return
  2842  0294                     l1294:	
  2843  0294  082E               	movf	___ftadd@exp2,w
  2844  0295  1903               	btfsc	3,2
  2845  0296  0008               	return
  2846  0297  082F               	movf	___ftadd@exp1,w
  2847  0298  022E               	subwf	___ftadd@exp2,w
  2848  0299  1803               	skipnc
  2849  029A  2AA3               	goto	l1300
  2850  029B  032E               	decf	___ftadd@exp2,w
  2851  029C  3AFF               	xorlw	255
  2852  029D  072F               	addwf	___ftadd@exp1,w
  2853  029E  00A9               	movwf	??___ftadd
  2854  029F  3019               	movlw	25
  2855  02A0  0229               	subwf	??___ftadd,w
  2856  02A1  1803               	btfsc	3,0
  2857  02A2  0008               	return
  2858  02A3                     l1300:	
  2859  02A3  3006               	movlw	6
  2860  02A4  00A9               	movwf	??___ftadd
  2861  02A5  0829               	movf	??___ftadd,w
  2862  02A6  00AD               	movwf	___ftadd@sign
  2863  02A7  1BA5               	btfsc	___ftadd@f1+2,7
  2864  02A8  17AD               	bsf	___ftadd@sign,7
  2865  02A9  1BA8               	btfsc	___ftadd@f2+2,7
  2866  02AA  172D               	bsf	___ftadd@sign,6
  2867  02AB  17A4               	bsf	___ftadd@f1+1,7
  2868  02AC  30FF               	movlw	255
  2869  02AD  05A3               	andwf	___ftadd@f1,f
  2870  02AE  30FF               	movlw	255
  2871  02AF  05A4               	andwf	___ftadd@f1+1,f
  2872  02B0  3000               	movlw	0
  2873  02B1  05A5               	andwf	___ftadd@f1+2,f
  2874  02B2  17A7               	bsf	___ftadd@f2+1,7
  2875  02B3  30FF               	movlw	255
  2876  02B4  05A6               	andwf	___ftadd@f2,f
  2877  02B5  30FF               	movlw	255
  2878  02B6  05A7               	andwf	___ftadd@f2+1,f
  2879  02B7  3000               	movlw	0
  2880  02B8  05A8               	andwf	___ftadd@f2+2,f
  2881  02B9  082E               	movf	___ftadd@exp2,w
  2882  02BA  022F               	subwf	___ftadd@exp1,w
  2883  02BB  1803               	skipnc
  2884  02BC  2AE3               	goto	l1322
  2885  02BD                     l1312:	
  2886  02BD  3001               	movlw	1
  2887  02BE                     u1385:	
  2888  02BE  1003               	clrc
  2889  02BF  0DA6               	rlf	___ftadd@f2,f
  2890  02C0  0DA7               	rlf	___ftadd@f2+1,f
  2891  02C1  0DA8               	rlf	___ftadd@f2+2,f
  2892  02C2  3EFF               	addlw	-1
  2893  02C3  1D03               	skipz
  2894  02C4  2ABE               	goto	u1385
  2895  02C5  3001               	movlw	1
  2896  02C6  02AE               	subwf	___ftadd@exp2,f
  2897  02C7  082E               	movf	___ftadd@exp2,w
  2898  02C8  062F               	xorwf	___ftadd@exp1,w
  2899  02C9  1903               	skipnz
  2900  02CA  2ADE               	goto	l1320
  2901  02CB  3001               	movlw	1
  2902  02CC  02AD               	subwf	___ftadd@sign,f
  2903  02CD  082D               	movf	___ftadd@sign,w
  2904  02CE  3907               	andlw	7
  2905  02CF  1903               	btfsc	3,2
  2906  02D0  2ADE               	goto	l1320
  2907  02D1  2ABD               	goto	l1312
  2908  02D2                     l1318:	
  2909  02D2  3001               	movlw	1
  2910  02D3                     u1415:	
  2911  02D3  1003               	clrc
  2912  02D4  0CA5               	rrf	___ftadd@f1+2,f
  2913  02D5  0CA4               	rrf	___ftadd@f1+1,f
  2914  02D6  0CA3               	rrf	___ftadd@f1,f
  2915  02D7  3EFF               	addlw	-1
  2916  02D8  1D03               	skipz
  2917  02D9  2AD3               	goto	u1415
  2918  02DA  3001               	movlw	1
  2919  02DB  00A9               	movwf	??___ftadd
  2920  02DC  0829               	movf	??___ftadd,w
  2921  02DD  07AF               	addwf	___ftadd@exp1,f
  2922  02DE                     l1320:	
  2923  02DE  082F               	movf	___ftadd@exp1,w
  2924  02DF  062E               	xorwf	___ftadd@exp2,w
  2925  02E0  1903               	btfsc	3,2
  2926  02E1  2B0C               	goto	l414
  2927  02E2  2AD2               	goto	l1318
  2928  02E3                     l1322:	
  2929  02E3  082F               	movf	___ftadd@exp1,w
  2930  02E4  022E               	subwf	___ftadd@exp2,w
  2931  02E5  1803               	skipnc
  2932  02E6  2B0C               	goto	l414
  2933  02E7                     l1324:	
  2934  02E7  3001               	movlw	1
  2935  02E8                     u1445:	
  2936  02E8  1003               	clrc
  2937  02E9  0DA3               	rlf	___ftadd@f1,f
  2938  02EA  0DA4               	rlf	___ftadd@f1+1,f
  2939  02EB  0DA5               	rlf	___ftadd@f1+2,f
  2940  02EC  3EFF               	addlw	-1
  2941  02ED  1D03               	skipz
  2942  02EE  2AE8               	goto	u1445
  2943  02EF  3001               	movlw	1
  2944  02F0  02AF               	subwf	___ftadd@exp1,f
  2945  02F1  082E               	movf	___ftadd@exp2,w
  2946  02F2  062F               	xorwf	___ftadd@exp1,w
  2947  02F3  1903               	skipnz
  2948  02F4  2B08               	goto	l1332
  2949  02F5  3001               	movlw	1
  2950  02F6  02AD               	subwf	___ftadd@sign,f
  2951  02F7  082D               	movf	___ftadd@sign,w
  2952  02F8  3907               	andlw	7
  2953  02F9  1903               	btfsc	3,2
  2954  02FA  2B08               	goto	l1332
  2955  02FB  2AE7               	goto	l1324
  2956  02FC                     l1330:	
  2957  02FC  3001               	movlw	1
  2958  02FD                     u1475:	
  2959  02FD  1003               	clrc
  2960  02FE  0CA8               	rrf	___ftadd@f2+2,f
  2961  02FF  0CA7               	rrf	___ftadd@f2+1,f
  2962  0300  0CA6               	rrf	___ftadd@f2,f
  2963  0301  3EFF               	addlw	-1
  2964  0302  1D03               	skipz
  2965  0303  2AFD               	goto	u1475
  2966  0304  3001               	movlw	1
  2967  0305  00A9               	movwf	??___ftadd
  2968  0306  0829               	movf	??___ftadd,w
  2969  0307  07AE               	addwf	___ftadd@exp2,f
  2970  0308                     l1332:	
  2971  0308  082F               	movf	___ftadd@exp1,w
  2972  0309  062E               	xorwf	___ftadd@exp2,w
  2973  030A  1D03               	skipz
  2974  030B  2AFC               	goto	l1330
  2975  030C                     l414:	
  2976  030C  1FAD               	btfss	___ftadd@sign,7
  2977  030D  2B1E               	goto	l1336
  2978  030E  30FF               	movlw	255
  2979  030F  06A3               	xorwf	___ftadd@f1,f
  2980  0310  30FF               	movlw	255
  2981  0311  06A4               	xorwf	___ftadd@f1+1,f
  2982  0312  30FF               	movlw	255
  2983  0313  06A5               	xorwf	___ftadd@f1+2,f
  2984  0314  3001               	movlw	1
  2985  0315  07A3               	addwf	___ftadd@f1,f
  2986  0316  3000               	movlw	0
  2987  0317  1803               	skipnc
  2988  0318  3001               	movlw	1
  2989  0319  07A4               	addwf	___ftadd@f1+1,f
  2990  031A  3000               	movlw	0
  2991  031B  1803               	skipnc
  2992  031C  3001               	movlw	1
  2993  031D  07A5               	addwf	___ftadd@f1+2,f
  2994  031E                     l1336:	
  2995  031E  1F2D               	btfss	___ftadd@sign,6
  2996  031F  2B30               	goto	l1340
  2997  0320  30FF               	movlw	255
  2998  0321  06A6               	xorwf	___ftadd@f2,f
  2999  0322  30FF               	movlw	255
  3000  0323  06A7               	xorwf	___ftadd@f2+1,f
  3001  0324  30FF               	movlw	255
  3002  0325  06A8               	xorwf	___ftadd@f2+2,f
  3003  0326  3001               	movlw	1
  3004  0327  07A6               	addwf	___ftadd@f2,f
  3005  0328  3000               	movlw	0
  3006  0329  1803               	skipnc
  3007  032A  3001               	movlw	1
  3008  032B  07A7               	addwf	___ftadd@f2+1,f
  3009  032C  3000               	movlw	0
  3010  032D  1803               	skipnc
  3011  032E  3001               	movlw	1
  3012  032F  07A8               	addwf	___ftadd@f2+2,f
  3013  0330                     l1340:	
  3014  0330  01AD               	clrf	___ftadd@sign
  3015  0331  0823               	movf	___ftadd@f1,w
  3016  0332  07A6               	addwf	___ftadd@f2,f
  3017  0333  0824               	movf	___ftadd@f1+1,w
  3018  0334  1103               	clrz
  3019  0335  1803               	skipnc
  3020  0336  0A24               	incf	___ftadd@f1+1,w
  3021  0337  1D03               	btfss	3,2
  3022  0338  07A7               	addwf	___ftadd@f2+1,f
  3023  0339  0825               	movf	___ftadd@f1+2,w
  3024  033A  1103               	clrz
  3025  033B  1803               	skipnc
  3026  033C  0A25               	incf	___ftadd@f1+2,w
  3027  033D  1D03               	btfss	3,2
  3028  033E  07A8               	addwf	___ftadd@f2+2,f
  3029  033F  1FA8               	btfss	___ftadd@f2+2,7
  3030  0340  2B53               	goto	l1350
  3031  0341  30FF               	movlw	255
  3032  0342  06A6               	xorwf	___ftadd@f2,f
  3033  0343  30FF               	movlw	255
  3034  0344  06A7               	xorwf	___ftadd@f2+1,f
  3035  0345  30FF               	movlw	255
  3036  0346  06A8               	xorwf	___ftadd@f2+2,f
  3037  0347  3001               	movlw	1
  3038  0348  07A6               	addwf	___ftadd@f2,f
  3039  0349  3000               	movlw	0
  3040  034A  1803               	skipnc
  3041  034B  3001               	movlw	1
  3042  034C  07A7               	addwf	___ftadd@f2+1,f
  3043  034D  3000               	movlw	0
  3044  034E  1803               	skipnc
  3045  034F  3001               	movlw	1
  3046  0350  07A8               	addwf	___ftadd@f2+2,f
  3047  0351  01AD               	clrf	___ftadd@sign
  3048  0352  0AAD               	incf	___ftadd@sign,f
  3049  0353                     l1350:	
  3050  0353  0826               	movf	___ftadd@f2,w
  3051  0354  00F4               	movwf	___ftpack@arg
  3052  0355  0827               	movf	___ftadd@f2+1,w
  3053  0356  00F5               	movwf	___ftpack@arg+1
  3054  0357  0828               	movf	___ftadd@f2+2,w
  3055  0358  00F6               	movwf	___ftpack@arg+2
  3056  0359  082F               	movf	___ftadd@exp1,w
  3057  035A  00A9               	movwf	??___ftadd
  3058  035B  0829               	movf	??___ftadd,w
  3059  035C  00F7               	movwf	___ftpack@exp
  3060  035D  082D               	movf	___ftadd@sign,w
  3061  035E  00AA               	movwf	??___ftadd+1
  3062  035F  082A               	movf	??___ftadd+1,w
  3063  0360  00F8               	movwf	___ftpack@sign
  3064  0361  120A  118A  2687   	fcall	___ftpack
  3065  0364  0874               	movf	?___ftpack,w
  3066  0365  1283               	bcf	3,5	;RP0=0, select bank0
  3067  0366  1303               	bcf	3,6	;RP1=0, select bank0
  3068  0367  00A3               	movwf	?___ftadd
  3069  0368  0875               	movf	?___ftpack+1,w
  3070  0369  00A4               	movwf	?___ftadd+1
  3071  036A  0876               	movf	?___ftpack+2,w
  3072  036B  00A5               	movwf	?___ftadd+2
  3073  036C  0008               	return
  3074  036D                     __end_of___ftadd:	
  3075                           
  3076                           	psect	text12
  3077  0E26                     __ptext12:	
  3078 ;; *************** function ___ftneg *****************
  3079 ;; Defined at:
  3080 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  f1              3    4[COMMON] float 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  3    4[COMMON] float 
  3087 ;; Registers used:
  3088 ;;		wreg
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3094 ;;      Params:         3       0       0       0       0
  3095 ;;      Locals:         0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0
  3097 ;;      Totals:         3       0       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    1
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_ftoa
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           
  3109                           ;psect for function ___ftneg
  3110  0E26                     ___ftneg:	
  3111                           
  3112                           ;incstack = 0
  3113                           ; Regs used in ___ftneg: [wreg]
  3114  0E26  0876               	movf	___ftneg@f1+2,w
  3115  0E27  0475               	iorwf	___ftneg@f1+1,w
  3116  0E28  0474               	iorwf	___ftneg@f1,w
  3117  0E29  1903               	skipnz
  3118  0E2A  0008               	return
  3119  0E2B  3080               	movlw	128
  3120  0E2C  06F6               	xorwf	___ftneg@f1+2,f
  3121  0E2D  0008               	return
  3122  0E2E                     __end_of___ftneg:	
  3123                           
  3124                           	psect	text13
  3125  046C                     __ptext13:	
  3126 ;; *************** function ___ftmul *****************
  3127 ;; Defined at:
  3128 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  f1              3    6[BANK0 ] float 
  3131 ;;  f2              3    9[BANK0 ] float 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
  3134 ;;  sign            1   21[BANK0 ] unsigned char 
  3135 ;;  cntr            1   20[BANK0 ] unsigned char 
  3136 ;;  exp             1   16[BANK0 ] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  3    6[BANK0 ] float 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0, pclath, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3146 ;;      Params:         0       6       0       0       0
  3147 ;;      Locals:         0       6       0       0       0
  3148 ;;      Temps:          0       4       0       0       0
  3149 ;;      Totals:         0      16       0       0       0
  3150 ;;Total ram usage:       16 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    2
  3153 ;; This function calls:
  3154 ;;		___ftpack
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;;		_ftoa
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function ___ftmul
  3163  046C                     ___ftmul:	
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3167  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3168  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3169  046E  0826               	movf	___ftmul@f1,w
  3170  046F  00AC               	movwf	??___ftmul
  3171  0470  0827               	movf	___ftmul@f1+1,w
  3172  0471  00AD               	movwf	??___ftmul+1
  3173  0472  0828               	movf	___ftmul@f1+2,w
  3174  0473  00AE               	movwf	??___ftmul+2
  3175  0474  1003               	clrc
  3176  0475  0D2D               	rlf	??___ftmul+1,w
  3177  0476  0D2E               	rlf	??___ftmul+2,w
  3178  0477  00AF               	movwf	??___ftmul+3
  3179  0478  082F               	movf	??___ftmul+3,w
  3180  0479  00B0               	movwf	___ftmul@exp
  3181  047A  08B0               	movf	___ftmul@exp,f
  3182  047B  1D03               	skipz
  3183  047C  2C84               	goto	l1544
  3184  047D  3000               	movlw	0
  3185  047E  00A6               	movwf	?___ftmul
  3186  047F  3000               	movlw	0
  3187  0480  00A7               	movwf	?___ftmul+1
  3188  0481  3000               	movlw	0
  3189  0482  00A8               	movwf	?___ftmul+2
  3190  0483  0008               	return
  3191  0484                     l1544:	
  3192  0484  0829               	movf	___ftmul@f2,w
  3193  0485  00AC               	movwf	??___ftmul
  3194  0486  082A               	movf	___ftmul@f2+1,w
  3195  0487  00AD               	movwf	??___ftmul+1
  3196  0488  082B               	movf	___ftmul@f2+2,w
  3197  0489  00AE               	movwf	??___ftmul+2
  3198  048A  1003               	clrc
  3199  048B  0D2D               	rlf	??___ftmul+1,w
  3200  048C  0D2E               	rlf	??___ftmul+2,w
  3201  048D  00AF               	movwf	??___ftmul+3
  3202  048E  082F               	movf	??___ftmul+3,w
  3203  048F  00B5               	movwf	___ftmul@sign
  3204  0490  08B5               	movf	___ftmul@sign,f
  3205  0491  1D03               	skipz
  3206  0492  2C9A               	goto	l1550
  3207  0493  3000               	movlw	0
  3208  0494  00A6               	movwf	?___ftmul
  3209  0495  3000               	movlw	0
  3210  0496  00A7               	movwf	?___ftmul+1
  3211  0497  3000               	movlw	0
  3212  0498  00A8               	movwf	?___ftmul+2
  3213  0499  0008               	return
  3214  049A                     l1550:	
  3215  049A  0835               	movf	___ftmul@sign,w
  3216  049B  3E7B               	addlw	123
  3217  049C  00AC               	movwf	??___ftmul
  3218  049D  082C               	movf	??___ftmul,w
  3219  049E  07B0               	addwf	___ftmul@exp,f
  3220  049F  0826               	movf	___ftmul@f1,w
  3221  04A0  00AC               	movwf	??___ftmul
  3222  04A1  0827               	movf	___ftmul@f1+1,w
  3223  04A2  00AD               	movwf	??___ftmul+1
  3224  04A3  0828               	movf	___ftmul@f1+2,w
  3225  04A4  00AE               	movwf	??___ftmul+2
  3226  04A5  3010               	movlw	16
  3227  04A6                     u1935:	
  3228  04A6  1003               	clrc
  3229  04A7  0CAE               	rrf	??___ftmul+2,f
  3230  04A8  0CAD               	rrf	??___ftmul+1,f
  3231  04A9  0CAC               	rrf	??___ftmul,f
  3232  04AA  3EFF               	addlw	-1
  3233  04AB  1D03               	skipz
  3234  04AC  2CA6               	goto	u1935
  3235  04AD  082C               	movf	??___ftmul,w
  3236  04AE  00AF               	movwf	??___ftmul+3
  3237  04AF  082F               	movf	??___ftmul+3,w
  3238  04B0  00B5               	movwf	___ftmul@sign
  3239  04B1  0829               	movf	___ftmul@f2,w
  3240  04B2  00AC               	movwf	??___ftmul
  3241  04B3  082A               	movf	___ftmul@f2+1,w
  3242  04B4  00AD               	movwf	??___ftmul+1
  3243  04B5  082B               	movf	___ftmul@f2+2,w
  3244  04B6  00AE               	movwf	??___ftmul+2
  3245  04B7  3010               	movlw	16
  3246  04B8                     u1945:	
  3247  04B8  1003               	clrc
  3248  04B9  0CAE               	rrf	??___ftmul+2,f
  3249  04BA  0CAD               	rrf	??___ftmul+1,f
  3250  04BB  0CAC               	rrf	??___ftmul,f
  3251  04BC  3EFF               	addlw	-1
  3252  04BD  1D03               	skipz
  3253  04BE  2CB8               	goto	u1945
  3254  04BF  082C               	movf	??___ftmul,w
  3255  04C0  00AF               	movwf	??___ftmul+3
  3256  04C1  082F               	movf	??___ftmul+3,w
  3257  04C2  06B5               	xorwf	___ftmul@sign,f
  3258  04C3  3080               	movlw	128
  3259  04C4  00AC               	movwf	??___ftmul
  3260  04C5  082C               	movf	??___ftmul,w
  3261  04C6  05B5               	andwf	___ftmul@sign,f
  3262  04C7  17A7               	bsf	___ftmul@f1+1,7
  3263  04C8  17AA               	bsf	___ftmul@f2+1,7
  3264  04C9  30FF               	movlw	255
  3265  04CA  05A9               	andwf	___ftmul@f2,f
  3266  04CB  30FF               	movlw	255
  3267  04CC  05AA               	andwf	___ftmul@f2+1,f
  3268  04CD  3000               	movlw	0
  3269  04CE  05AB               	andwf	___ftmul@f2+2,f
  3270  04CF  3000               	movlw	0
  3271  04D0  00B1               	movwf	___ftmul@f3_as_product
  3272  04D1  3000               	movlw	0
  3273  04D2  00B2               	movwf	___ftmul@f3_as_product+1
  3274  04D3  3000               	movlw	0
  3275  04D4  00B3               	movwf	___ftmul@f3_as_product+2
  3276  04D5  3007               	movlw	7
  3277  04D6  00AC               	movwf	??___ftmul
  3278  04D7  082C               	movf	??___ftmul,w
  3279  04D8  00B4               	movwf	___ftmul@cntr
  3280  04D9                     l1562:	
  3281  04D9  1C26               	btfss	___ftmul@f1,0
  3282  04DA  2CE9               	goto	l1566
  3283  04DB  0829               	movf	___ftmul@f2,w
  3284  04DC  07B1               	addwf	___ftmul@f3_as_product,f
  3285  04DD  082A               	movf	___ftmul@f2+1,w
  3286  04DE  1103               	clrz
  3287  04DF  1803               	skipnc
  3288  04E0  0A2A               	incf	___ftmul@f2+1,w
  3289  04E1  1D03               	btfss	3,2
  3290  04E2  07B2               	addwf	___ftmul@f3_as_product+1,f
  3291  04E3  082B               	movf	___ftmul@f2+2,w
  3292  04E4  1103               	clrz
  3293  04E5  1803               	skipnc
  3294  04E6  0A2B               	incf	___ftmul@f2+2,w
  3295  04E7  1D03               	btfss	3,2
  3296  04E8  07B3               	addwf	___ftmul@f3_as_product+2,f
  3297  04E9                     l1566:	
  3298  04E9  3001               	movlw	1
  3299  04EA                     u1975:	
  3300  04EA  1003               	clrc
  3301  04EB  0CA8               	rrf	___ftmul@f1+2,f
  3302  04EC  0CA7               	rrf	___ftmul@f1+1,f
  3303  04ED  0CA6               	rrf	___ftmul@f1,f
  3304  04EE  3EFF               	addlw	-1
  3305  04EF  1D03               	skipz
  3306  04F0  2CEA               	goto	u1975
  3307  04F1  3001               	movlw	1
  3308  04F2                     u1985:	
  3309  04F2  1003               	clrc
  3310  04F3  0DA9               	rlf	___ftmul@f2,f
  3311  04F4  0DAA               	rlf	___ftmul@f2+1,f
  3312  04F5  0DAB               	rlf	___ftmul@f2+2,f
  3313  04F6  3EFF               	addlw	-1
  3314  04F7  1D03               	skipz
  3315  04F8  2CF2               	goto	u1985
  3316  04F9  3001               	movlw	1
  3317  04FA  02B4               	subwf	___ftmul@cntr,f
  3318  04FB  1D03               	btfss	3,2
  3319  04FC  2CD9               	goto	l1562
  3320  04FD  3009               	movlw	9
  3321  04FE  00AC               	movwf	??___ftmul
  3322  04FF  082C               	movf	??___ftmul,w
  3323  0500  00B4               	movwf	___ftmul@cntr
  3324  0501                     l1574:	
  3325  0501  1C26               	btfss	___ftmul@f1,0
  3326  0502  2D11               	goto	l1578
  3327  0503  0829               	movf	___ftmul@f2,w
  3328  0504  07B1               	addwf	___ftmul@f3_as_product,f
  3329  0505  082A               	movf	___ftmul@f2+1,w
  3330  0506  1103               	clrz
  3331  0507  1803               	skipnc
  3332  0508  0A2A               	incf	___ftmul@f2+1,w
  3333  0509  1D03               	btfss	3,2
  3334  050A  07B2               	addwf	___ftmul@f3_as_product+1,f
  3335  050B  082B               	movf	___ftmul@f2+2,w
  3336  050C  1103               	clrz
  3337  050D  1803               	skipnc
  3338  050E  0A2B               	incf	___ftmul@f2+2,w
  3339  050F  1D03               	btfss	3,2
  3340  0510  07B3               	addwf	___ftmul@f3_as_product+2,f
  3341  0511                     l1578:	
  3342  0511  3001               	movlw	1
  3343  0512                     u2025:	
  3344  0512  1003               	clrc
  3345  0513  0CA8               	rrf	___ftmul@f1+2,f
  3346  0514  0CA7               	rrf	___ftmul@f1+1,f
  3347  0515  0CA6               	rrf	___ftmul@f1,f
  3348  0516  3EFF               	addlw	-1
  3349  0517  1D03               	skipz
  3350  0518  2D12               	goto	u2025
  3351  0519  3001               	movlw	1
  3352  051A                     u2035:	
  3353  051A  1003               	clrc
  3354  051B  0CB3               	rrf	___ftmul@f3_as_product+2,f
  3355  051C  0CB2               	rrf	___ftmul@f3_as_product+1,f
  3356  051D  0CB1               	rrf	___ftmul@f3_as_product,f
  3357  051E  3EFF               	addlw	-1
  3358  051F  1D03               	skipz
  3359  0520  2D1A               	goto	u2035
  3360  0521  3001               	movlw	1
  3361  0522  02B4               	subwf	___ftmul@cntr,f
  3362  0523  1D03               	btfss	3,2
  3363  0524  2D01               	goto	l1574
  3364  0525  0831               	movf	___ftmul@f3_as_product,w
  3365  0526  00F4               	movwf	___ftpack@arg
  3366  0527  0832               	movf	___ftmul@f3_as_product+1,w
  3367  0528  00F5               	movwf	___ftpack@arg+1
  3368  0529  0833               	movf	___ftmul@f3_as_product+2,w
  3369  052A  00F6               	movwf	___ftpack@arg+2
  3370  052B  0830               	movf	___ftmul@exp,w
  3371  052C  00AC               	movwf	??___ftmul
  3372  052D  082C               	movf	??___ftmul,w
  3373  052E  00F7               	movwf	___ftpack@exp
  3374  052F  0835               	movf	___ftmul@sign,w
  3375  0530  00AD               	movwf	??___ftmul+1
  3376  0531  082D               	movf	??___ftmul+1,w
  3377  0532  00F8               	movwf	___ftpack@sign
  3378  0533  120A  118A  2687   	fcall	___ftpack
  3379  0536  0874               	movf	?___ftpack,w
  3380  0537  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3382  0539  00A6               	movwf	?___ftmul
  3383  053A  0875               	movf	?___ftpack+1,w
  3384  053B  00A7               	movwf	?___ftmul+1
  3385  053C  0876               	movf	?___ftpack+2,w
  3386  053D  00A8               	movwf	?___ftmul+2
  3387  053E  0008               	return
  3388  053F                     __end_of___ftmul:	
  3389                           
  3390                           	psect	text14
  3391  06F5                     __ptext14:	
  3392 ;; *************** function ___ftge *****************
  3393 ;; Defined at:
  3394 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  ff1             3    4[COMMON] float 
  3397 ;;  ff2             3    7[COMMON] float 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;		None
  3400 ;; Return value:  Size  Location     Type
  3401 ;;		None               void
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3409 ;;      Params:         6       0       0       0       0
  3410 ;;      Locals:         0       0       0       0       0
  3411 ;;      Temps:          0       6       0       0       0
  3412 ;;      Totals:         6       6       0       0       0
  3413 ;;Total ram usage:       12 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    1
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_ftoa
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           
  3424                           ;psect for function ___ftge
  3425  06F5                     ___ftge:	
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3429  06F5  1FF6               	btfss	___ftge@ff1+2,7
  3430  06F6  2F1E               	goto	l1522
  3431  06F7  3000               	movlw	0
  3432  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3433  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  3434  06FA  00A0               	movwf	??___ftge
  3435  06FB  3000               	movlw	0
  3436  06FC  00A1               	movwf	??___ftge+1
  3437  06FD  3080               	movlw	128
  3438  06FE  00A2               	movwf	??___ftge+2
  3439  06FF  0974               	comf	___ftge@ff1,w
  3440  0700  00A3               	movwf	??___ftge+3
  3441  0701  0975               	comf	___ftge@ff1+1,w
  3442  0702  00A4               	movwf	??___ftge+4
  3443  0703  0976               	comf	___ftge@ff1+2,w
  3444  0704  00A5               	movwf	??___ftge+5
  3445  0705  0AA3               	incf	??___ftge+3,f
  3446  0706  1903               	skipnz
  3447  0707  0AA4               	incf	??___ftge+4,f
  3448  0708  1903               	skipnz
  3449  0709  0AA5               	incf	??___ftge+5,f
  3450  070A  0823               	movf	??___ftge+3,w
  3451  070B  07A0               	addwf	??___ftge,f
  3452  070C  0824               	movf	??___ftge+4,w
  3453  070D  1803               	skipnc
  3454  070E  0F24               	incfsz	??___ftge+4,w
  3455  070F  2F11               	goto	u1871
  3456  0710  2F12               	goto	u1872
  3457  0711                     u1871:	
  3458  0711  07A1               	addwf	??___ftge+1,f
  3459  0712                     u1872:	
  3460  0712  0825               	movf	??___ftge+5,w
  3461  0713  1803               	skipnc
  3462  0714  0F25               	incfsz	??___ftge+5,w
  3463  0715  2F17               	goto	u1873
  3464  0716  2F18               	goto	u1874
  3465  0717                     u1873:	
  3466  0717  07A2               	addwf	??___ftge+2,f
  3467  0718                     u1874:	
  3468  0718  0820               	movf	??___ftge,w
  3469  0719  00F4               	movwf	___ftge@ff1
  3470  071A  0821               	movf	??___ftge+1,w
  3471  071B  00F5               	movwf	___ftge@ff1+1
  3472  071C  0822               	movf	??___ftge+2,w
  3473  071D  00F6               	movwf	___ftge@ff1+2
  3474  071E                     l1522:	
  3475  071E  1FF9               	btfss	___ftge@ff2+2,7
  3476  071F  2F47               	goto	l1526
  3477  0720  3000               	movlw	0
  3478  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0722  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0723  00A0               	movwf	??___ftge
  3481  0724  3000               	movlw	0
  3482  0725  00A1               	movwf	??___ftge+1
  3483  0726  3080               	movlw	128
  3484  0727  00A2               	movwf	??___ftge+2
  3485  0728  0977               	comf	___ftge@ff2,w
  3486  0729  00A3               	movwf	??___ftge+3
  3487  072A  0978               	comf	___ftge@ff2+1,w
  3488  072B  00A4               	movwf	??___ftge+4
  3489  072C  0979               	comf	___ftge@ff2+2,w
  3490  072D  00A5               	movwf	??___ftge+5
  3491  072E  0AA3               	incf	??___ftge+3,f
  3492  072F  1903               	skipnz
  3493  0730  0AA4               	incf	??___ftge+4,f
  3494  0731  1903               	skipnz
  3495  0732  0AA5               	incf	??___ftge+5,f
  3496  0733  0823               	movf	??___ftge+3,w
  3497  0734  07A0               	addwf	??___ftge,f
  3498  0735  0824               	movf	??___ftge+4,w
  3499  0736  1803               	skipnc
  3500  0737  0F24               	incfsz	??___ftge+4,w
  3501  0738  2F3A               	goto	u1891
  3502  0739  2F3B               	goto	u1892
  3503  073A                     u1891:	
  3504  073A  07A1               	addwf	??___ftge+1,f
  3505  073B                     u1892:	
  3506  073B  0825               	movf	??___ftge+5,w
  3507  073C  1803               	skipnc
  3508  073D  0F25               	incfsz	??___ftge+5,w
  3509  073E  2F40               	goto	u1893
  3510  073F  2F41               	goto	u1894
  3511  0740                     u1893:	
  3512  0740  07A2               	addwf	??___ftge+2,f
  3513  0741                     u1894:	
  3514  0741  0820               	movf	??___ftge,w
  3515  0742  00F7               	movwf	___ftge@ff2
  3516  0743  0821               	movf	??___ftge+1,w
  3517  0744  00F8               	movwf	___ftge@ff2+1
  3518  0745  0822               	movf	??___ftge+2,w
  3519  0746  00F9               	movwf	___ftge@ff2+2
  3520  0747                     l1526:	
  3521  0747  3080               	movlw	128
  3522  0748  06F6               	xorwf	___ftge@ff1+2,f
  3523  0749  3080               	movlw	128
  3524  074A  06F9               	xorwf	___ftge@ff2+2,f
  3525  074B  0879               	movf	___ftge@ff2+2,w
  3526  074C  0276               	subwf	___ftge@ff1+2,w
  3527  074D  1D03               	skipz
  3528  074E  0008               	return
  3529  074F  0878               	movf	___ftge@ff2+1,w
  3530  0750  0275               	subwf	___ftge@ff1+1,w
  3531  0751  1D03               	skipz
  3532  0752  0008               	return
  3533  0753  0877               	movf	___ftge@ff2,w
  3534  0754  0274               	subwf	___ftge@ff1,w
  3535  0755  0008               	return
  3536  0756                     __end_of___ftge:	
  3537                           
  3538                           	psect	text15
  3539  07E5                     __ptext15:	
  3540 ;; *************** function ___lwtoft *****************
  3541 ;; Defined at:
  3542 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  c               2    3[BANK0 ] unsigned int 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;		None
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  3    3[BANK0 ] float 
  3549 ;; Registers used:
  3550 ;;		wreg, status,2, status,0, pclath, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3556 ;;      Params:         0       3       0       0       0
  3557 ;;      Locals:         0       0       0       0       0
  3558 ;;      Temps:          1       0       0       0       0
  3559 ;;      Totals:         1       3       0       0       0
  3560 ;;Total ram usage:        4 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    2
  3563 ;; This function calls:
  3564 ;;		___ftpack
  3565 ;; This function is called by:
  3566 ;;		_main
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           
  3571                           ;psect for function ___lwtoft
  3572  07E5                     ___lwtoft:	
  3573                           
  3574                           ;incstack = 0
  3575                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3576  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  3577  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  3578  07E7  0823               	movf	___lwtoft@c,w
  3579  07E8  00F4               	movwf	___ftpack@arg
  3580  07E9  0824               	movf	___lwtoft@c+1,w
  3581  07EA  00F5               	movwf	___ftpack@arg+1
  3582  07EB  01F6               	clrf	___ftpack@arg+2
  3583  07EC  308E               	movlw	142
  3584  07ED  00F9               	movwf	??___lwtoft
  3585  07EE  0879               	movf	??___lwtoft,w
  3586  07EF  00F7               	movwf	___ftpack@exp
  3587  07F0  01F8               	clrf	___ftpack@sign
  3588  07F1  120A  118A  2687   	fcall	___ftpack
  3589  07F4  0874               	movf	?___ftpack,w
  3590  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  3591  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  3592  07F7  00A3               	movwf	?___lwtoft
  3593  07F8  0875               	movf	?___ftpack+1,w
  3594  07F9  00A4               	movwf	?___lwtoft+1
  3595  07FA  0876               	movf	?___ftpack+2,w
  3596  07FB  00A5               	movwf	?___lwtoft+2
  3597  07FC  0008               	return
  3598  07FD                     __end_of___lwtoft:	
  3599                           
  3600                           	psect	text16
  3601  0687                     __ptext16:	
  3602 ;; *************** function ___ftpack *****************
  3603 ;; Defined at:
  3604 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  arg             3    4[COMMON] unsigned um
  3607 ;;  exp             1    7[COMMON] unsigned char 
  3608 ;;  sign            1    8[COMMON] unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  3    4[COMMON] float 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3620 ;;      Params:         5       0       0       0       0
  3621 ;;      Locals:         0       0       0       0       0
  3622 ;;      Temps:          0       3       0       0       0
  3623 ;;      Totals:         5       3       0       0       0
  3624 ;;Total ram usage:        8 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    1
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		___ftadd
  3631 ;;		___ftmul
  3632 ;;		___lltoft
  3633 ;;		___lwtoft
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function ___ftpack
  3639  0687                     ___ftpack:	
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3643  0687  0877               	movf	___ftpack@exp,w
  3644  0688  1903               	btfsc	3,2
  3645  0689  2E8F               	goto	l1232
  3646  068A  0876               	movf	___ftpack@arg+2,w
  3647  068B  0475               	iorwf	___ftpack@arg+1,w
  3648  068C  0474               	iorwf	___ftpack@arg,w
  3649  068D  1D03               	skipz
  3650  068E  2EA4               	goto	l1238
  3651  068F                     l1232:	
  3652  068F  3000               	movlw	0
  3653  0690  00F4               	movwf	?___ftpack
  3654  0691  3000               	movlw	0
  3655  0692  00F5               	movwf	?___ftpack+1
  3656  0693  3000               	movlw	0
  3657  0694  00F6               	movwf	?___ftpack+2
  3658  0695  0008               	return
  3659  0696                     l1236:	
  3660  0696  3001               	movlw	1
  3661  0697  1283               	bcf	3,5	;RP0=0, select bank0
  3662  0698  1303               	bcf	3,6	;RP1=0, select bank0
  3663  0699  00A0               	movwf	??___ftpack
  3664  069A  0820               	movf	??___ftpack,w
  3665  069B  07F7               	addwf	___ftpack@exp,f
  3666  069C  3001               	movlw	1
  3667  069D                     u1145:	
  3668  069D  1003               	clrc
  3669  069E  0CF6               	rrf	___ftpack@arg+2,f
  3670  069F  0CF5               	rrf	___ftpack@arg+1,f
  3671  06A0  0CF4               	rrf	___ftpack@arg,f
  3672  06A1  3EFF               	addlw	-1
  3673  06A2  1D03               	skipz
  3674  06A3  2E9D               	goto	u1145
  3675  06A4                     l1238:	
  3676  06A4  30FE               	movlw	254
  3677  06A5  0576               	andwf	___ftpack@arg+2,w
  3678  06A6  1903               	btfsc	3,2
  3679  06A7  2EC1               	goto	l385
  3680  06A8  2E96               	goto	l1236
  3681  06A9                     l1240:	
  3682  06A9  3001               	movlw	1
  3683  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  3684  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  3685  06AC  00A0               	movwf	??___ftpack
  3686  06AD  0820               	movf	??___ftpack,w
  3687  06AE  07F7               	addwf	___ftpack@exp,f
  3688  06AF  3001               	movlw	1
  3689  06B0  07F4               	addwf	___ftpack@arg,f
  3690  06B1  3000               	movlw	0
  3691  06B2  1803               	skipnc
  3692  06B3  3001               	movlw	1
  3693  06B4  07F5               	addwf	___ftpack@arg+1,f
  3694  06B5  3000               	movlw	0
  3695  06B6  1803               	skipnc
  3696  06B7  3001               	movlw	1
  3697  06B8  07F6               	addwf	___ftpack@arg+2,f
  3698  06B9  3001               	movlw	1
  3699  06BA                     u1165:	
  3700  06BA  1003               	clrc
  3701  06BB  0CF6               	rrf	___ftpack@arg+2,f
  3702  06BC  0CF5               	rrf	___ftpack@arg+1,f
  3703  06BD  0CF4               	rrf	___ftpack@arg,f
  3704  06BE  3EFF               	addlw	-1
  3705  06BF  1D03               	skipz
  3706  06C0  2EBA               	goto	u1165
  3707  06C1                     l385:	
  3708  06C1  30FF               	movlw	255
  3709  06C2  0576               	andwf	___ftpack@arg+2,w
  3710  06C3  1903               	btfsc	3,2
  3711  06C4  2ED0               	goto	l1248
  3712  06C5  2EA9               	goto	l1240
  3713  06C6                     l1246:	
  3714  06C6  3001               	movlw	1
  3715  06C7  02F7               	subwf	___ftpack@exp,f
  3716  06C8  3001               	movlw	1
  3717  06C9                     u1185:	
  3718  06C9  1003               	clrc
  3719  06CA  0DF4               	rlf	___ftpack@arg,f
  3720  06CB  0DF5               	rlf	___ftpack@arg+1,f
  3721  06CC  0DF6               	rlf	___ftpack@arg+2,f
  3722  06CD  3EFF               	addlw	-1
  3723  06CE  1D03               	skipz
  3724  06CF  2EC9               	goto	u1185
  3725  06D0                     l1248:	
  3726  06D0  1FF5               	btfss	___ftpack@arg+1,7
  3727  06D1  2EC6               	goto	l1246
  3728  06D2  1877               	btfsc	___ftpack@exp,0
  3729  06D3  2EDA               	goto	l391
  3730  06D4  30FF               	movlw	255
  3731  06D5  05F4               	andwf	___ftpack@arg,f
  3732  06D6  307F               	movlw	127
  3733  06D7  05F5               	andwf	___ftpack@arg+1,f
  3734  06D8  30FF               	movlw	255
  3735  06D9  05F6               	andwf	___ftpack@arg+2,f
  3736  06DA                     l391:	
  3737  06DA  1003               	clrc
  3738  06DB  0CF7               	rrf	___ftpack@exp,f
  3739  06DC  0877               	movf	___ftpack@exp,w
  3740  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  3741  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  3742  06DF  00A0               	movwf	??___ftpack
  3743  06E0  01A1               	clrf	??___ftpack+1
  3744  06E1  01A2               	clrf	??___ftpack+2
  3745  06E2  3010               	movlw	16
  3746  06E3                     u1215:	
  3747  06E3  1003               	clrc
  3748  06E4  0DA0               	rlf	??___ftpack,f
  3749  06E5  0DA1               	rlf	??___ftpack+1,f
  3750  06E6  0DA2               	rlf	??___ftpack+2,f
  3751  06E7  3EFF               	addlw	-1
  3752  06E8  1D03               	skipz
  3753  06E9  2EE3               	goto	u1215
  3754  06EA  0820               	movf	??___ftpack,w
  3755  06EB  04F4               	iorwf	___ftpack@arg,f
  3756  06EC  0821               	movf	??___ftpack+1,w
  3757  06ED  04F5               	iorwf	___ftpack@arg+1,f
  3758  06EE  0822               	movf	??___ftpack+2,w
  3759  06EF  04F6               	iorwf	___ftpack@arg+2,f
  3760  06F0  0878               	movf	___ftpack@sign,w
  3761  06F1  1903               	btfsc	3,2
  3762  06F2  0008               	return
  3763  06F3  17F6               	bsf	___ftpack@arg+2,7
  3764  06F4  0008               	return
  3765  06F5                     __end_of___ftpack:	
  3766                           
  3767                           	psect	text17
  3768  0EED                     __ptext17:	
  3769 ;; *************** function _LCD_WriteString *****************
  3770 ;; Defined at:
  3771 ;;		line 78 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  Str             2    6[COMMON] PTR const unsigned char 
  3774 ;;		 -> NULL(0), ftoa@buf(17), STR_1(17), 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;		None               void
  3779 ;; Registers used:
  3780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3786 ;;      Params:         2       0       0       0       0
  3787 ;;      Locals:         0       0       0       0       0
  3788 ;;      Temps:          0       0       0       0       0
  3789 ;;      Totals:         2       0       0       0       0
  3790 ;;Total ram usage:        2 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    2
  3793 ;; This function calls:
  3794 ;;		_LCD_WriteData
  3795 ;; This function is called by:
  3796 ;;		_main
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           
  3801                           ;psect for function _LCD_WriteString
  3802  0EED                     _LCD_WriteString:	
  3803  0EED                     l1676:	
  3804                           ;final.c: 81: while(*Str != '\0')
  3805                           
  3806                           ;incstack = 0
  3807                           ; Regs used in _LCD_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3808                           
  3809  0EED  0877               	movf	LCD_WriteString@Str+1,w
  3810  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3811  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  3812  0EF0  00FF               	movwf	127
  3813  0EF1  0876               	movf	LCD_WriteString@Str,w
  3814  0EF2  0084               	movwf	4
  3815  0EF3  120A  158A  2000  120A  158A  	fcall	stringtab
  3816  0EF8  3800               	iorlw	0
  3817  0EF9  1903               	btfsc	3,2
  3818  0EFA  0008               	return
  3819                           
  3820                           ;final.c: 82: {
  3821                           ;final.c: 83: LCD_WriteData(*Str);
  3822  0EFB  0877               	movf	LCD_WriteString@Str+1,w
  3823  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  3824  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  3825  0EFE  00FF               	movwf	127
  3826  0EFF  0876               	movf	LCD_WriteString@Str,w
  3827  0F00  0084               	movwf	4
  3828  0F01  120A  158A  2000  120A  158A  	fcall	stringtab
  3829  0F06  120A  158A  265F  120A  158A  	fcall	_LCD_WriteData
  3830                           
  3831                           ;final.c: 84: Str++;
  3832  0F0B  3001               	movlw	1
  3833  0F0C  07F6               	addwf	LCD_WriteString@Str,f
  3834  0F0D  1803               	skipnc
  3835  0F0E  0AF7               	incf	LCD_WriteString@Str+1,f
  3836  0F0F  2EED               	goto	l1676
  3837  0F10                     __end_of_LCD_WriteString:	
  3838                           
  3839                           	psect	text18
  3840  0E5F                     __ptext18:	
  3841 ;; *************** function _LCD_WriteData *****************
  3842 ;; Defined at:
  3843 ;;		line 64 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  Byte            1    wreg     unsigned char 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  Byte            1    5[COMMON] unsigned char 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;		None               void
  3850 ;; Registers used:
  3851 ;;		wreg
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3857 ;;      Params:         0       0       0       0       0
  3858 ;;      Locals:         1       0       0       0       0
  3859 ;;      Temps:          1       0       0       0       0
  3860 ;;      Totals:         2       0       0       0       0
  3861 ;;Total ram usage:        2 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    1
  3864 ;; This function calls:
  3865 ;;		Nothing
  3866 ;; This function is called by:
  3867 ;;		_LCD_WriteString
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           
  3872                           ;psect for function _LCD_WriteData
  3873  0E5F                     _LCD_WriteData:	
  3874                           
  3875                           ;incstack = 0
  3876                           ; Regs used in _LCD_WriteData: [wreg]
  3877                           ;LCD_WriteData@Byte stored from wreg
  3878  0E5F  00F5               	movwf	LCD_WriteData@Byte
  3879                           
  3880                           ;final.c: 66: PORTEbits.RE0 = 1;
  3881  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  3883  0E62  1409               	bsf	9,0	;volatile
  3884                           
  3885                           ;final.c: 68: PORTD = Byte;
  3886  0E63  0875               	movf	LCD_WriteData@Byte,w
  3887  0E64  0088               	movwf	8	;volatile
  3888                           
  3889                           ;final.c: 70: PORTEbits.RE1 = 1;
  3890  0E65  1489               	bsf	9,1	;volatile
  3891                           
  3892                           ;final.c: 72: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3893  0E66  303D               	movlw	61
  3894  0E67  00F4               	movwf	??_LCD_WriteData
  3895  0E68                     u2267:	
  3896  0E68  0BF4               	decfsz	??_LCD_WriteData,f
  3897  0E69  2E68               	goto	u2267
  3898                           
  3899                           ;final.c: 74: PORTEbits.RE1 = 0;
  3900  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  3902  0E6C  1089               	bcf	9,1	;volatile
  3903  0E6D  0008               	return
  3904  0E6E                     __end_of_LCD_WriteData:	
  3905                           
  3906                           	psect	text19
  3907  0FA9                     __ptext19:	
  3908 ;; *************** function _LCD_Init *****************
  3909 ;; Defined at:
  3910 ;;		line 108 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;		None
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;		None
  3915 ;; Return value:  Size  Location     Type
  3916 ;;		None               void
  3917 ;; Registers used:
  3918 ;;		wreg, status,2, status,0, pclath, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3924 ;;      Params:         0       0       0       0       0
  3925 ;;      Locals:         0       0       0       0       0
  3926 ;;      Temps:          2       0       0       0       0
  3927 ;;      Totals:         2       0       0       0       0
  3928 ;;Total ram usage:        2 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    2
  3931 ;; This function calls:
  3932 ;;		_LCD_WriteCmd
  3933 ;; This function is called by:
  3934 ;;		_main
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           
  3939                           ;psect for function _LCD_Init
  3940  0FA9                     _LCD_Init:	
  3941                           
  3942                           ;final.c: 142: _delay((unsigned long)((15)*(18432000/4000.0)));
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  3946  0FA9  305A               	movlw	90
  3947  0FAA  00F7               	movwf	??_LCD_Init+1
  3948  0FAB  30C3               	movlw	195
  3949  0FAC  00F6               	movwf	??_LCD_Init
  3950  0FAD                     u2277:	
  3951  0FAD  0BF6               	decfsz	??_LCD_Init,f
  3952  0FAE  2FAD               	goto	u2277
  3953  0FAF  0BF7               	decfsz	??_LCD_Init+1,f
  3954  0FB0  2FAD               	goto	u2277
  3955                           
  3956                           ;final.c: 144: LCD_WriteCmd(0x30);
  3957  0FB1  3030               	movlw	48
  3958  0FB2  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  3959                           
  3960                           ;final.c: 145: _delay((unsigned long)((4)*(18432000/4000.0)));
  3961  0FB7  3018               	movlw	24
  3962  0FB8  00F7               	movwf	??_LCD_Init+1
  3963  0FB9  30EF               	movlw	239
  3964  0FBA  00F6               	movwf	??_LCD_Init
  3965  0FBB                     u2287:	
  3966  0FBB  0BF6               	decfsz	??_LCD_Init,f
  3967  0FBC  2FBB               	goto	u2287
  3968  0FBD  0BF7               	decfsz	??_LCD_Init+1,f
  3969  0FBE  2FBB               	goto	u2287
  3970                           
  3971                           ;final.c: 147: LCD_WriteCmd(0x30);
  3972  0FBF  3030               	movlw	48
  3973  0FC0  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  3974                           
  3975                           ;final.c: 148: _delay((unsigned long)((100)*(18432000/4000000.0)));
  3976  0FC5  3099               	movlw	153
  3977  0FC6  00F6               	movwf	??_LCD_Init
  3978  0FC7                     u2297:	
  3979  0FC7  0BF6               	decfsz	??_LCD_Init,f
  3980  0FC8  2FC7               	goto	u2297
  3981                           
  3982                           ;final.c: 150: LCD_WriteCmd(0x30);
  3983  0FC9  3030               	movlw	48
  3984  0FCA  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  3985                           
  3986                           ;final.c: 151: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3987  0FCF  303D               	movlw	61
  3988  0FD0  00F6               	movwf	??_LCD_Init
  3989  0FD1                     u2307:	
  3990  0FD1  0BF6               	decfsz	??_LCD_Init,f
  3991  0FD2  2FD1               	goto	u2307
  3992                           
  3993                           ;final.c: 153: LCD_WriteCmd(0x38);
  3994  0FD3  3038               	movlw	56
  3995  0FD4  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  3996                           
  3997                           ;final.c: 154: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3998  0FD9  303D               	movlw	61
  3999  0FDA  00F6               	movwf	??_LCD_Init
  4000  0FDB                     u2317:	
  4001  0FDB  0BF6               	decfsz	??_LCD_Init,f
  4002  0FDC  2FDB               	goto	u2317
  4003                           
  4004                           ;final.c: 156: LCD_WriteCmd(0x01);
  4005  0FDD  3001               	movlw	1
  4006  0FDE  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  4007                           
  4008                           ;final.c: 157: _delay((unsigned long)((2)*(18432000/4000.0)));
  4009  0FE3  300C               	movlw	12
  4010  0FE4  00F7               	movwf	??_LCD_Init+1
  4011  0FE5  30F7               	movlw	247
  4012  0FE6  00F6               	movwf	??_LCD_Init
  4013  0FE7                     u2327:	
  4014  0FE7  0BF6               	decfsz	??_LCD_Init,f
  4015  0FE8  2FE7               	goto	u2327
  4016  0FE9  0BF7               	decfsz	??_LCD_Init+1,f
  4017  0FEA  2FE7               	goto	u2327
  4018                           
  4019                           ;final.c: 159: LCD_WriteCmd(0x0C);
  4020  0FEB  300C               	movlw	12
  4021  0FEC  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  4022                           
  4023                           ;final.c: 160: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4024  0FF1  303D               	movlw	61
  4025  0FF2  00F6               	movwf	??_LCD_Init
  4026  0FF3                     u2337:	
  4027  0FF3  0BF6               	decfsz	??_LCD_Init,f
  4028  0FF4  2FF3               	goto	u2337
  4029                           
  4030                           ;final.c: 162: LCD_WriteCmd(0x06);
  4031  0FF5  3006               	movlw	6
  4032  0FF6  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  4033                           
  4034                           ;final.c: 163: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4035  0FFB  303D               	movlw	61
  4036  0FFC  00F6               	movwf	??_LCD_Init
  4037  0FFD                     u2347:	
  4038  0FFD  0BF6               	decfsz	??_LCD_Init,f
  4039  0FFE  2FFD               	goto	u2347
  4040  0FFF  0008               	return
  4041  1000                     __end_of_LCD_Init:	
  4042                           
  4043                           	psect	text20
  4044  0E80                     __ptext20:	
  4045 ;; *************** function _LCD_Cursor *****************
  4046 ;; Defined at:
  4047 ;;		line 27 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  Row             1    wreg     unsigned char 
  4050 ;;  Col             1    4[COMMON] unsigned char 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  Row             1    6[COMMON] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;		None               void
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4062 ;;      Params:         1       0       0       0       0
  4063 ;;      Locals:         1       0       0       0       0
  4064 ;;      Temps:          1       0       0       0       0
  4065 ;;      Totals:         3       0       0       0       0
  4066 ;;Total ram usage:        3 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    1
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _LCD_Cursor
  4078  0E80                     _LCD_Cursor:	
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _LCD_Cursor: [wreg+status,2+status,0]
  4082                           ;LCD_Cursor@Row stored from wreg
  4083  0E80  00F6               	movwf	LCD_Cursor@Row
  4084                           
  4085                           ;final.c: 29: PORTEbits.RE0 = 0;
  4086  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  4087  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  4088  0E83  1009               	bcf	9,0	;volatile
  4089                           
  4090                           ;final.c: 31: if (Row == 0)
  4091  0E84  08F6               	movf	LCD_Cursor@Row,f
  4092  0E85  1D03               	skipz
  4093  0E86  2E8A               	goto	l1662
  4094                           
  4095                           ;final.c: 32: {
  4096                           ;final.c: 33: PORTD = 0x80 + Col;
  4097  0E87  0874               	movf	LCD_Cursor@Col,w
  4098  0E88  3E80               	addlw	128
  4099  0E89  2E8C               	goto	L3
  4100  0E8A                     l1662:	
  4101                           ;final.c: 34: }
  4102                           
  4103                           
  4104                           ;final.c: 35: else
  4105                           ;final.c: 36: {
  4106                           ;final.c: 37: PORTD = 0xC0 + Col;
  4107  0E8A  0874               	movf	LCD_Cursor@Col,w
  4108  0E8B  3EC0               	addlw	192
  4109  0E8C                     L3:	
  4110  0E8C  0088               	movwf	8	;volatile
  4111                           
  4112                           ;final.c: 38: }
  4113                           ;final.c: 41: PORTEbits.RE1 = 1;
  4114  0E8D  1489               	bsf	9,1	;volatile
  4115                           
  4116                           ;final.c: 43: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4117  0E8E  303D               	movlw	61
  4118  0E8F  00F5               	movwf	??_LCD_Cursor
  4119  0E90                     u2357:	
  4120  0E90  0BF5               	decfsz	??_LCD_Cursor,f
  4121  0E91  2E90               	goto	u2357
  4122                           
  4123                           ;final.c: 45: PORTEbits.RE1 = 0;
  4124  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  4125  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  4126  0E94  1089               	bcf	9,1	;volatile
  4127  0E95  0008               	return
  4128  0E96                     __end_of_LCD_Cursor:	
  4129                           
  4130                           	psect	text21
  4131  0ECA                     __ptext21:	
  4132 ;; *************** function _LCD_Clear *****************
  4133 ;; Defined at:
  4134 ;;		line 92 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, pclath, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4148 ;;      Params:         0       0       0       0       0
  4149 ;;      Locals:         0       0       0       0       0
  4150 ;;      Temps:          2       0       0       0       0
  4151 ;;      Totals:         2       0       0       0       0
  4152 ;;Total ram usage:        2 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    2
  4155 ;; This function calls:
  4156 ;;		_LCD_WriteCmd
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _LCD_Clear
  4164  0ECA                     _LCD_Clear:	
  4165                           
  4166                           ;final.c: 94: LCD_WriteCmd(0x01);
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  4170  0ECA  3001               	movlw	1
  4171  0ECB  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  4172                           
  4173                           ;final.c: 96: _delay((unsigned long)((2)*(18432000/4000.0)));
  4174  0ED0  300C               	movlw	12
  4175  0ED1  00F7               	movwf	??_LCD_Clear+1
  4176  0ED2  30F7               	movlw	247
  4177  0ED3  00F6               	movwf	??_LCD_Clear
  4178  0ED4                     u2367:	
  4179  0ED4  0BF6               	decfsz	??_LCD_Clear,f
  4180  0ED5  2ED4               	goto	u2367
  4181  0ED6  0BF7               	decfsz	??_LCD_Clear+1,f
  4182  0ED7  2ED4               	goto	u2367
  4183                           
  4184                           ;final.c: 98: LCD_WriteCmd(0x0C);
  4185  0ED8  300C               	movlw	12
  4186  0ED9  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  4187                           
  4188                           ;final.c: 100: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4189  0EDE  303D               	movlw	61
  4190  0EDF  00F6               	movwf	??_LCD_Clear
  4191  0EE0                     u2377:	
  4192  0EE0  0BF6               	decfsz	??_LCD_Clear,f
  4193  0EE1  2EE0               	goto	u2377
  4194                           
  4195                           ;final.c: 102: LCD_WriteCmd(0x06);
  4196  0EE2  3006               	movlw	6
  4197  0EE3  120A  158A  2650  120A  158A  	fcall	_LCD_WriteCmd
  4198                           
  4199                           ;final.c: 104: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4200  0EE8  303D               	movlw	61
  4201  0EE9  00F6               	movwf	??_LCD_Clear
  4202  0EEA                     u2387:	
  4203  0EEA  0BF6               	decfsz	??_LCD_Clear,f
  4204  0EEB  2EEA               	goto	u2387
  4205  0EEC  0008               	return
  4206  0EED                     __end_of_LCD_Clear:	
  4207                           
  4208                           	psect	text22
  4209  0E50                     __ptext22:	
  4210 ;; *************** function _LCD_WriteCmd *****************
  4211 ;; Defined at:
  4212 ;;		line 49 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  Byte            1    wreg     unsigned char 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  Byte            1    5[COMMON] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;		None               void
  4219 ;; Registers used:
  4220 ;;		wreg
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4226 ;;      Params:         0       0       0       0       0
  4227 ;;      Locals:         1       0       0       0       0
  4228 ;;      Temps:          1       0       0       0       0
  4229 ;;      Totals:         2       0       0       0       0
  4230 ;;Total ram usage:        2 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    1
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_LCD_Clear
  4237 ;;		_LCD_Init
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           
  4242                           ;psect for function _LCD_WriteCmd
  4243  0E50                     _LCD_WriteCmd:	
  4244                           
  4245                           ;incstack = 0
  4246                           ; Regs used in _LCD_WriteCmd: [wreg]
  4247                           ;LCD_WriteCmd@Byte stored from wreg
  4248  0E50  00F5               	movwf	LCD_WriteCmd@Byte
  4249                           
  4250                           ;final.c: 51: PORTEbits.RE0 = 0;
  4251  0E51  1283               	bcf	3,5	;RP0=0, select bank0
  4252  0E52  1303               	bcf	3,6	;RP1=0, select bank0
  4253  0E53  1009               	bcf	9,0	;volatile
  4254                           
  4255                           ;final.c: 53: PORTD = Byte;
  4256  0E54  0875               	movf	LCD_WriteCmd@Byte,w
  4257  0E55  0088               	movwf	8	;volatile
  4258                           
  4259                           ;final.c: 56: PORTEbits.RE1 = 1;
  4260  0E56  1489               	bsf	9,1	;volatile
  4261                           
  4262                           ;final.c: 58: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4263  0E57  303D               	movlw	61
  4264  0E58  00F4               	movwf	??_LCD_WriteCmd
  4265  0E59                     u2397:	
  4266  0E59  0BF4               	decfsz	??_LCD_WriteCmd,f
  4267  0E5A  2E59               	goto	u2397
  4268                           
  4269                           ;final.c: 60: PORTEbits.RE1 = 0;
  4270  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  4271  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  4272  0E5D  1089               	bcf	9,1	;volatile
  4273  0E5E  0008               	return
  4274  0E5F                     __end_of_LCD_WriteCmd:	
  4275                           
  4276                           	psect	text23
  4277  0E96                     __ptext23:	
  4278 ;; *************** function _ADC_Read *****************
  4279 ;; Defined at:
  4280 ;;		line 188 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  channel         2    4[COMMON] unsigned short 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;		None
  4285 ;; Return value:  Size  Location     Type
  4286 ;;		None               void
  4287 ;; Registers used:
  4288 ;;		wreg, status,2, status,0
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4294 ;;      Params:         2       0       0       0       0
  4295 ;;      Locals:         0       0       0       0       0
  4296 ;;      Temps:          1       0       0       0       0
  4297 ;;      Totals:         3       0       0       0       0
  4298 ;;Total ram usage:        3 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    1
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _ADC_Read
  4310  0E96                     _ADC_Read:	
  4311                           
  4312                           ;final.c: 190: ADCON0bits.CHS = channel;
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  4316  0E96  0874               	movf	ADC_Read@channel,w
  4317  0E97  00F6               	movwf	??_ADC_Read
  4318  0E98  0DF6               	rlf	??_ADC_Read,f
  4319  0E99  0DF6               	rlf	??_ADC_Read,f
  4320  0E9A  0DF6               	rlf	??_ADC_Read,f
  4321  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  4322  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  4323  0E9D  081F               	movf	31,w	;volatile
  4324  0E9E  0676               	xorwf	??_ADC_Read,w
  4325  0E9F  39C7               	andlw	-57
  4326  0EA0  0676               	xorwf	??_ADC_Read,w
  4327  0EA1  009F               	movwf	31	;volatile
  4328                           
  4329                           ;final.c: 191: ADCON0bits.ADON = 1;
  4330  0EA2  141F               	bsf	31,0	;volatile
  4331                           
  4332                           ;final.c: 193: _delay((unsigned long)((25)*(18432000/4000000.0)));
  4333  0EA3  3026               	movlw	38
  4334  0EA4  00F6               	movwf	??_ADC_Read
  4335  0EA5                     u2407:	
  4336  0EA5  0BF6               	decfsz	??_ADC_Read,f
  4337  0EA6  2EA5               	goto	u2407
  4338                           
  4339                           ;final.c: 195: ADCON0bits.GO = 1;
  4340  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  4341  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  4342  0EA9  151F               	bsf	31,2	;volatile
  4343  0EAA                     l79:	
  4344                           ;final.c: 196: while(ADCON0bits.GO);
  4345                           
  4346  0EAA  191F               	btfsc	31,2	;volatile
  4347  0EAB  2EAA               	goto	l79
  4348                           
  4349                           ;final.c: 198: PIR1bits.ADIF = 0;
  4350  0EAC  130C               	bcf	12,6	;volatile
  4351  0EAD  0008               	return
  4352  0EAE                     __end_of_ADC_Read:	
  4353                           
  4354                           	psect	text24
  4355  0E6E                     __ptext24:	
  4356 ;; *************** function _ADC_Init *****************
  4357 ;; Defined at:
  4358 ;;		line 168 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;		None               void
  4365 ;; Registers used:
  4366 ;;		None
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4372 ;;      Params:         0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0
  4375 ;;      Totals:         0       0       0       0       0
  4376 ;;Total ram usage:        0 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    1
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_main
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           
  4387                           ;psect for function _ADC_Init
  4388  0E6E                     _ADC_Init:	
  4389                           
  4390                           ;final.c: 171: ADCON1bits.ADFM = 1;
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in _ADC_Init: []
  4394  0E6E  1683               	bsf	3,5	;RP0=1, select bank1
  4395  0E6F  1303               	bcf	3,6	;RP1=0, select bank1
  4396  0E70  179F               	bsf	31,7	;volatile
  4397                           
  4398                           ;final.c: 172: ADCON1bits.PCFG3 = 0;
  4399  0E71  119F               	bcf	31,3	;volatile
  4400                           
  4401                           ;final.c: 173: ADCON1bits.PCFG2 = 1;
  4402  0E72  151F               	bsf	31,2	;volatile
  4403                           
  4404                           ;final.c: 174: ADCON1bits.PCFG1 = 0;
  4405  0E73  109F               	bcf	31,1	;volatile
  4406                           
  4407                           ;final.c: 175: ADCON1bits.PCFG0 = 0;
  4408  0E74  101F               	bcf	31,0	;volatile
  4409                           
  4410                           ;final.c: 178: ADCON0bits.ADCS1 = 1;
  4411  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  4412  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  4413  0E77  179F               	bsf	31,7	;volatile
  4414                           
  4415                           ;final.c: 179: ADCON0bits.ADCS0 = 0;
  4416  0E78  131F               	bcf	31,6	;volatile
  4417                           
  4418                           ;final.c: 182: PIE1bits.ADIE = 0;
  4419  0E79  1683               	bsf	3,5	;RP0=1, select bank1
  4420  0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  4421  0E7B  130C               	bcf	12,6	;volatile
  4422                           
  4423                           ;final.c: 183: PIR1bits.ADIF = 0;
  4424  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  4425  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  4426  0E7E  130C               	bcf	12,6	;volatile
  4427  0E7F  0008               	return
  4428  0E80                     __end_of_ADC_Init:	
  4429                           
  4430                           	psect	text25
  4431  0E36                     __ptext25:	
  4432 ;; *************** function _ISR *****************
  4433 ;; Defined at:
  4434 ;;		line 203 in file "C:\Users\Ricardo\Desktop\Trabalho Final Micro\mplab\final.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;		None               void
  4441 ;; Registers used:
  4442 ;;		wreg
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4448 ;;      Params:         0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0
  4450 ;;      Temps:          4       0       0       0       0
  4451 ;;      Totals:         4       0       0       0       0
  4452 ;;Total ram usage:        4 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		Interrupt level 1
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _ISR
  4463  0E36                     _ISR:	
  4464                           
  4465                           ;final.c: 206: if (PIR1bits.ADIF == 1)
  4466  0E36  080C               	movf	12,w	;volatile
  4467                           
  4468                           ;final.c: 207: {
  4469  0E37  0873               	movf	??_ISR+3,w
  4470  0E38  00FF               	movwf	127
  4471  0E39  0872               	movf	??_ISR+2,w
  4472  0E3A  008A               	movwf	10
  4473  0E3B  0871               	movf	??_ISR+1,w
  4474  0E3C  0084               	movwf	4
  4475  0E3D  0E70               	swapf	??_ISR^(0+-128),w
  4476  0E3E  0083               	movwf	3
  4477  0E3F  0EFE               	swapf	126,f
  4478  0E40  0E7E               	swapf	126,w
  4479  0E41  0009               	retfie
  4480  0E42                     __end_of_ISR:	
  4481  007E                     btemp	set	126	;btemp
  4482  007E                     wtemp	set	126
  4483  007E                     wtemp0	set	126
  4484  0080                     wtemp1	set	128
  4485  0082                     wtemp2	set	130
  4486  0084                     wtemp3	set	132
  4487  0086                     wtemp4	set	134
  4488  0088                     wtemp5	set	136
  4489  007F                     wtemp6	set	127
  4490  007E                     ttemp	set	126
  4491  007E                     ttemp0	set	126
  4492  0081                     ttemp1	set	129
  4493  0084                     ttemp2	set	132
  4494  0087                     ttemp3	set	135
  4495  007F                     ttemp4	set	127
  4496  007E                     ltemp	set	126
  4497  007E                     ltemp0	set	126
  4498  0082                     ltemp1	set	130
  4499  0086                     ltemp2	set	134
  4500  0080                     ltemp3	set	128
  4501                           
  4502                           	psect	intentry
  4503  0004                     __pintentry:	
  4504                           ;incstack = 0
  4505                           ; Regs used in _ISR: [wreg]
  4506                           
  4507  0004                     interrupt_function:	
  4508  007E                     saved_w	set	btemp
  4509  0004  00FE               	movwf	btemp
  4510  0005  0E03               	swapf	3,w
  4511  0006  00F0               	movwf	??_ISR
  4512  0007  0804               	movf	4,w
  4513  0008  00F1               	movwf	??_ISR+1
  4514  0009  080A               	movf	10,w
  4515  000A  00F2               	movwf	??_ISR+2
  4516  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4517  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4518  000D  087F               	movf	btemp+1,w
  4519  000E  00F3               	movwf	??_ISR+3
  4520  000F  120A  158A  2E36   	ljmp	_ISR


Data Sizes:
    Strings     28
    Constant    40
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     63      71
    BANK1            80      0      17
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> status(BANK0[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S304$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    display	PTR unsigned char  size(1) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), 

    LCD_WriteString@Str	PTR const unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->___lwtoft
    _main->_strlen
    _ftoa->___ftge
    _ftoa->___lltoft
    _sprintf->___lldiv
    _sprintf->___wmul
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    _LCD_WriteString->_LCD_WriteData
    _LCD_Init->_LCD_WriteCmd
    _LCD_Clear->_LCD_WriteCmd

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16660
                                             58 BANK0      5     5      0
                           _ADC_Init
                           _ADC_Read
                          _LCD_Clear
                         _LCD_Cursor
                           _LCD_Init
                    _LCD_WriteString
                            ___ftmul
                           ___lwtoft
                               _ftoa
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               8     6      2     120
                                              4 COMMON     6     4      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ftoa                                                14    10      4   11105
                                             44 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    17      9    1998
                                             18 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                              4 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     287
                                              8 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              4 COMMON     6     6      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2181
                                              9 COMMON     1     1      0
                                              3 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     380
                                             22 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3189
                                             16 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3016
                                              3 BANK0     13     7      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              4 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2630
                                              6 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     264
                                              4 COMMON     6     0      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2134
                                              9 COMMON     1     1      0
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2048
                                              4 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     0      2     195
                                              6 COMMON     2     0      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      22
                                              6 COMMON     2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor                                           3     2      1     322
                                              4 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      22
                                              6 COMMON     2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteCmd                                         2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2      86
                                              4 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _LCD_Clear
     _LCD_WriteCmd
   _LCD_Cursor
   _LCD_Init
     _LCD_WriteCmd
   _LCD_WriteString
     _LCD_WriteData
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _ftoa
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _strlen

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      62       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      47       5       88.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      11       7       21.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      62      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Nov 02 13:11:59 2019

                       pc 0002               ?_LCD_Cursor 0074               __CFG_CP$OFF 0000  
                      l79 0EAA                        fsr 0004       ___wmul@multiplicand 0076  
            ___ftadd@exp1 002F              ___ftadd@exp2 002E              ___ftadd@sign 002D  
                     l121 0113                       l118 00F5                       l224 0F1A  
                     l414 030C                       l391 06DA                       l385 06C1  
            __CFG_CPD$OFF 0000                       _ISR 0E36                       fsr0 0004  
                     indf 0000              __CFG_FOSC$HS 0000         ??_LCD_WriteString 0078  
            __CFG_LVP$OFF 0000                      ?_ISR 0070                      l1300 02A3  
                    l1240 06A9                      l1232 068F                      l1320 02DE  
                    l1312 02BD                      l1330 02FC                      l1322 02E3  
                    l1236 0696                      l1340 0330                      l1332 0308  
                    l1324 02E7        LCD_WriteString@Str 0076                      l1246 06C6  
                    l1238 06A4                      l1350 0353                      l1318 02D2  
                    l1510 0250                      l1422 004F                      l1248 06D0  
                    l1336 031E                      l1360 0768                      l1272 0F12  
                    l1504 01F6                      l1512 002F                      l1522 071E  
                    l1290 028D                      l1370 07A0                      l1362 0778  
                    l1266 0E4E                      l1450 00F7                      l1514 025F  
                    l1460 0125                      l1428 0064                      l1436 00A2  
                    l1526 0747                      l1550 049A                      l1294 0294  
                    l1374 07AD                      l1390 0F93                      l1470 0147  
                    l1454 00FC                      l1446 00B4                      l1544 0484  
                    l1608 0613                      l1384 0F65                      l1448 00F0  
                    l1562 04D9                      l1642 067E                      l1634 0662  
                    l1626 0645                      l1650 07BC                      l1386 0F75  
                    l1394 0FA0                      l1490 01BB                      l1482 0189  
                    l1474 014D                      l1730 0578                      l1636 066D  
                    l1628 0655                      l1652 07CE                      l1662 0E8A  
                    l1574 0501                      l1566 04E9                      l1638 0670  
                    l1494 01DC                      l1486 01A1                      l1496 01E0  
                    l1578 0511                      l1746 0F3A                      l1676 0EED  
                    l1748 0F45                      l1794 03CD                      STR_1 0838  
                    STR_2 0849                      u1215 06E3                      u1145 069D  
                    u2025 0512                      u2105 0646                      u2035 051A  
                    u1165 06BA                      u1415 02D3                      u2135 0664  
                    u1185 06C9                      u1265 0F1B                      u2307 0FD1  
                    u2075 061A                      u1275 0F22                      u2317 0FDB  
                    u1445 02E8                      u2165 07C1                      u2237 03A5  
                    u2407 0EA5                      u2327 0FE7                      u1615 0F69  
                    u2247 03C6                      u2337 0FF3                      u1385 02BE  
                    u1545 076C                      u2257 0465                      u2347 0FFD  
                    u2267 0E68                      u1475 02FD                      u1635 0F83  
                    u2357 0E90                      u2277 0FAD                      u1565 077A  
                    u1645 0F94                      u1805 01CC                      u2367 0ED4  
                    u2287 0FBB                      u1575 078F                      u2377 0EE0  
                    u2297 0FC7                      u1585 07A1                      u2387 0EEA  
                    u1835 0201                      u1755 0150                      u2397 0E59  
                    u1845 025C                      u1765 017F                      u1871 0711  
                    u1935 04A6                      u1872 0712                      u1873 0717  
                    u1945 04B8                      u1785 0198                      u1874 0718  
                    u1891 073A                      u1795 01B2                      u1892 073B  
                    u1893 0740                      u1894 0741                      u1975 04EA  
                    u1985 04F2                      _main 036D                      _ftoa 053F  
            ___ftpack@arg 0074        __size_of_LCD_Clear 0023              ___ftpack@exp 0077  
                    btemp 007E          __end_of_ADC_Init 0E80          __end_of_ADC_Read 0EAE  
                    ltemp 007E                      start 0012                      ttemp 007E  
                    wtemp 007E             ?_LCD_WriteCmd 0070             _LCD_WriteData 0E5F  
            ___ftmul@cntr 0034              ___ftmul@sign 0035                     ??_ISR 0070  
            ___fttol@exp1 0043              ___fttol@lval 003F          __end_of_LCD_Init 1000  
                   ?_main 0070                     ?_ftoa 004C           __end_of___ftadd 036D  
           __CFG_WDTE$OFF 0000           __end_of___ftneg 0E2E           __end_of___lldiv 07B6  
         __end_of___ftmul 053F           __end_of___llmod 0FA9           __end_of___ftsub 0ECA  
         __end_of___fttol 0687                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _PORTD 0008                     _PORTE 0009  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _TRISE 0089             __CFG_PWRTE$ON 0000  
            ___lltoft@exp 0027           __end_of_dpowers 0838           __end_of_isdigit 0E50  
                   _input 005F             ___ftpack@sign 0078                     ftoa@f 004C  
                   ftoa@l 0055            __CFG_BOREN$OFF 0000       __size_of_LCD_Cursor 0016  
                   pclath 000A                     ltemp0 007E                     ltemp1 0082  
                   ltemp2 0086                     ltemp3 0080                     ttemp0 007E  
                   ttemp1 0081                     ttemp2 0084                     ttemp3 0087  
                   ttemp4 007F                     status 0003                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
         __end_of_sprintf 0264            ??_LCD_WriteCmd 0074            ?_LCD_WriteData 0070  
         __initialization 0015              __end_of_main 046C              __end_of_ftoa 05F9  
                  ??_main 005A                    ??_ftoa 0050             ___fttol@sign1 003E  
       __end_of_LCD_Clear 0EED          ___llmod@dividend 002C                    _ADRESH 001E  
                  _ADRESL 009E          __end_of___ftpack 06F5          __end_of___lltoft 07E5  
        __end_of___lwtoft 07FD          LCD_WriteCmd@Byte 0075                    ___ftge 06F5  
                  ___wmul 0F10                 ??___ftadd 0029                 ??___ftneg 0077  
               ??___lldiv 0074                 ??___ftmul 002C                 ??___llmod 0030  
               ??___ftsub 007A                 ??___fttol 003A           ADC_Read@channel 0074  
                  _status 0065                    _strlen 0F33                    ftoa@cp 0059  
   ___ftmul@f3_as_product 0031                 ??_isdigit 0074                 ?_ADC_Init 0070  
               ?_ADC_Read 0074                    saved_w 007E                 ??_sprintf 003B  
 __end_of__initialization 0024                 ?_LCD_Init 0070                ___ftadd@f1 0023  
              ___ftadd@f2 0026           ??_LCD_WriteData 0074                ___ftge@ff1 0074  
              ___ftge@ff2 0077                ___ftneg@f1 0074                ___ftmul@f1 0026  
              ___ftmul@f2 0029                ___ftsub@f1 0033                ___ftsub@f2 0030  
              ___fttol@f1 0036            __pcstackCOMMON 0070             LCD_Cursor@Col 0074  
           LCD_Cursor@Row 0076              ??_LCD_Cursor 0075                ___lltoft@c 0023  
         _LCD_WriteString 0EED                ___lwtoft@c 0023                ??_ADC_Init 0074  
              ??_ADC_Read 0076      __end_of_LCD_WriteCmd 0E5F              sprintf@width 0047  
              __pbssBANK0 005F                __pbssBANK1 00A0        __end_of_LCD_Cursor 0E96  
              ??_LCD_Init 0076                __pmaintext 036D                   ?___ftge 0074  
                 ?___wmul 0074                __pintentry 0004                 ?___ftpack 0074  
               ?___lltoft 0023                   ?_strlen 0074                 ?___lwtoft 0023  
              __stringtab 0800   __end_of_LCD_WriteString 0F10                 _ADCResult 0062  
       LCD_WriteData@Byte 0075           __size_of___ftge 0061                   ___ftadd 0264  
                 ___ftneg 0E26                   ___lldiv 0756           __size_of___wmul 0023  
                 ___ftmul 046C                   ___llmod 0F5B                   ___ftsub 0EAE  
                 ___fttol 05F9                ??___ftpack 0020                ??___lltoft 0079  
                 __ptext1 0F33                   __ptext2 053F                   __ptext3 0028  
                 __ptext4 0E42                   __ptext5 0F10                   __ptext6 0F5B  
                 __ptext7 0756                   __ptext8 07B6                   __ptext9 05F9  
              ??___lwtoft 0079                   _display 0064           __size_of_strlen 0028  
            __size_of_ISR 000C                   _dpowers 0810                   _isdigit 0E42  
               _LCD_Clear 0ECA                   _sprintf 0028                   main@tam 005D  
                 clrloop0 0E2F      end_of_initialization 0024                   ftoa@buf 00A0  
                 ftoa@rem 0051           ___lldiv@divisor 0020           ___lldiv@counter 0079  
                 strlen@s 0020     __size_of_LCD_WriteCmd 000F                 _PORTEbits 0009  
              ?_LCD_Clear 0070         __size_of_ADC_Init 0012         __size_of_ADC_Read 0018  
        ?_LCD_WriteString 0076         __size_of_LCD_Init 0057              _LCD_WriteCmd 0E50  
             ___ftmul@exp 0030            __end_of___ftge 0756            __end_of___wmul 0F33  
          __end_of_strlen 0F5B       start_initialization 0015               __end_of_ISR 0E42  
              ftoa@status 004F           ___llmod@divisor 0028           ___llmod@counter 0031  
   __end_of_LCD_WriteData 0E6E                  ??___ftge 0020                  ??___wmul 0078  
                ??_strlen 0076         __size_of___ftpack 006E         __size_of___lltoft 002F  
               ___latbits 0002         __size_of___lwtoft 0018             __pcstackBANK0 0020  
             ??_LCD_Clear 0076       __end_of__stringdata 0854               sprintf@_val 0042  
             sprintf@flag 0040               sprintf@prec 0049                  ?___ftadd 0023  
                ?___ftneg 0074                  ?___lldiv 0020                  ?___ftmul 0026  
                ?___llmod 0028                  ?___ftsub 0030                  ?___fttol 0036  
               __pstrings 0800                  ?_isdigit 0070                  _ADC_Init 0E6E  
                _ADC_Read 0E96                  ?_sprintf 0032         interrupt_function 0004  
                _LCD_Init 0FA9            ___wmul@product 0078                 clear_ram0 0E2E  
                _PIE1bits 008C                  _PIR1bits 000C                _ADCON0bits 001F  
             __stringbase 080F                _ADCON1bits 009F               __stringdata 0838  
       ___wmul@multiplier 0074          __size_of___ftadd 0109          __size_of___ftneg 0008  
        __size_of___lldiv 0060          __size_of___ftmul 00D3          __size_of___llmod 004E  
        __size_of___ftsub 001C          __size_of___fttol 008E                  ___ftpack 0687  
      __end_of__stringtab 0810                  ___lltoft 07B6               _isdigit$512 0074  
                ___lwtoft 07E5          __size_of_isdigit 000E                  __ptext10 0EAE  
                __ptext11 0264                  __ptext20 0E80                  __ptext12 0E26  
                __ptext21 0ECA                  __ptext13 046C                  __ptext22 0E50  
                __ptext14 06F5                  __ptext23 0E96                  __ptext15 07E5  
                __ptext24 0E6E                  __ptext16 0687                  __ptext25 0E36  
                __ptext17 0EED                  __ptext18 0E5F                  __ptext19 0FA9  
        __size_of_sprintf 023C             __size_of_main 00FF             __size_of_ftoa 00BA  
              _LCD_Cursor 0E80  __size_of_LCD_WriteString 0023                _INTCONbits 000B  
                isdigit@c 0075                  intlevel1 0000                 sprintf@ap 0041  
               sprintf@sp 0046          ___lldiv@dividend 0024                 stringcode 080A  
                sprintf@c 004B                  sprintf@f 0032          ___lldiv@quotient 0075  
                strlen@cp 0021                  stringdir 080A                  stringtab 0800  
  __size_of_LCD_WriteData 000F  
